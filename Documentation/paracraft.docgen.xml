<?xml version="1.0" encoding="utf-8" ?>

<doc>
	<tables>
		<table name="BlockEngine" src="script/apps/Aries/Creator/Game/block_engine.lua">
			<function line="80" name="SetGameLogic">
				<summary>function BlockEngine:SetGameLogic(game_logic)
set the current game logic to use. 
				</summary>
				<parameter name="game_logic"/>
			</function>
			<function line="86" name="Connect">
				<summary>function BlockEngine:Connect()
call this function to connect the block engine with the current low level game engine's block terrain world. 
call this function when one enters the block based game.
				</summary>
			</function>
			<function line="143" name="OnBeforeLoadBlockRegion">
				<summary>function BlockEngine.OnBeforeLoadBlockRegion()

   @return 0 or nil to proceed loading the region in async mode. 
return 1 to prevent the region from loaded
				</summary>
				<returns>return or nil to proceed loading the region in async mode. 
return 1 to prevent the region from loaded
				</returns>
			</function>
			<function line="154" name="OnSaveBlockRegion">
				<summary>function BlockEngine.OnSaveBlockRegion()

				</summary>
			</function>
			<function line="160" name="OnLoadBlockRegion">
				<summary>function BlockEngine.OnLoadBlockRegion()

				</summary>
			</function>
			<function line="200" name="OnUnLoadBlockRegion">
				<summary>function BlockEngine.OnUnLoadBlockRegion()

				</summary>
			</function>
			<function line="211" name="OnGeneratorScript">
				<summary>function BlockEngine.OnGeneratorScript()

				</summary>
			</function>
			<function line="227" name="Disconnect">
				<summary>function BlockEngine:Disconnect()
disconnect the block engine, so that no computation occurs afterwards. 
call this function when one exit the block based game
				</summary>
			</function>
			<function line="235" name="SetOffsetY">
				<summary>function BlockEngine:SetOffsetY(y)

				</summary>
				<parameter name="y"/>
			</function>
			<function line="245" name="GetBlockTypeInCache">
				<summary>function BlockEngine:GetBlockTypeInCache(x, y, z)
used to cache some game data per block
   @return -1 means nil, 0 means empty, 1 means opaque block, 2 means deco, etc. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<returns>return -1 means nil, 0 means empty, 1 means opaque block, 2 means deco, etc. 
				</returns>
			</function>
			<function line="256" name="GetBlockTypeInCacheIdx">
				<summary>function BlockEngine:GetBlockTypeInCacheIdx(bx, by, bz)
used to cache some game data per block
   @return -1 means nil, 0 means empty, 1 means opaque block, 2 means deco, etc. 
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
				<returns>return -1 means nil, 0 means empty, 1 means opaque block, 2 means deco, etc. 
				</returns>
			</function>
			<function line="267" name="SetBlockAttributeInCache">
				<summary>function BlockEngine:SetBlockAttributeInCache(x,y,z, name, value)
similar to GetBlockType except that index is block coordinates is uint16
   @param bx,by,bz: block index
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="name"/>
				<parameter name="value"/>
			</function>
			<function line="277" name="GetBlockAttributeInCache">
				<summary>function BlockEngine:GetBlockAttributeInCache(x,y,z, name)
one can set the block attribute at the given position
supported attributes are like "type", "texture", ...
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="name"/>
			</function>
			<function line="285" name="GetBlockInCacheIdx">
				<summary>function BlockEngine:GetBlockInCacheIdx(bx, by, bz, bCreateIfNotExist)
create/get block at given world position. 
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
				<parameter name="bCreateIfNotExist"/>
			</function>
			<function line="300" name="GetBlockInCache">
				<summary>function BlockEngine:GetBlockInCache(x,y,z, bCreateIfNotExist)
create/get block at given world position.
   @param x, y, z: real world position.
				</summary>
				<parameter name="x">, y, z: real world position.
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="bCreateIfNotExist"/>
			</function>
			<function line="315" name="IsBlockFreeSpace">
				<summary>function BlockEngine:IsBlockFreeSpace(bx, by, bz)
whether this block is freespace. 
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
			</function>
			<function line="324" name="GetRegionPos">
				<summary>function BlockEngine:GetRegionPos(x,z)
get the region pos that contains x, z
				</summary>
				<parameter name="x"/>
				<parameter name="z"/>
			</function>
			<function line="335" name="ConvertToRealPosition_float">
				<summary>function BlockEngine:ConvertToRealPosition_float(x,y,z)
convert from block index to real world coordinate. use floating point operations.
   @param note: the returned position is always the center of the block.
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="354" name="ConvertToRealPosition">
				<summary>function BlockEngine:ConvertToRealPosition(x,y,z)
only call this function when math is in 64 bits double, otherwise use the 32bits float version above, which is compatible with C++
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="361" name="real_bottom">
				<summary>function BlockEngine:real_bottom(x,y,z)
this is 64bits version. convert from block index position to real world bottom center position.
   @param x,y,z: block index (may be floating point index). y, z can be nil. x must be number. 
				</summary>
				<parameter name="x">,y,z: block index (may be floating point index). y, z can be nil. x must be number. 
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="366" name="real_top">
				<summary>function BlockEngine:real_top(x,y,z)
top center position of given block in real coordinate
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="372" name="real_min">
				<summary>function BlockEngine:real_min(x,y,z)
this is 64bits version. convert from block index position to real world min position.
   @param x,y,z: block index (may be floating point index). y, z can be nil. x must be number. 
				</summary>
				<parameter name="x">,y,z: block index (may be floating point index). y, z can be nil. x must be number. 
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="381" name="realY">
				<summary>function BlockEngine:realY(y)
return the real y. returned value is at the bottom of the y block.
				</summary>
				<parameter name="y"/>
			</function>
			<function line="386" name="ConvertToBlockIndex_float">
				<summary>function BlockEngine:ConvertToBlockIndex_float(x,y,z)
convert real world coordinate x,y,z to block index. use floating point operations.  
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="406" name="ConvertToBlockIndex">
				<summary>function BlockEngine:ConvertToBlockIndex(x,y,z)
only call this function when math is in 64 bits double, otherwise use the 32bits float version above, which is compatible with C++
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="414" name="block_float">
				<summary>function BlockEngine:block_float(x,y,z)
convert to block floating point index.
   @param x,y,z: real world cooridnate. y z can be nil.
   @return block index but NOT math.floored. 
				</summary>
				<parameter name="x">,y,z: real world cooridnate. y z can be nil.
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
				<returns>return index but NOT math.floored. 
				</returns>
			</function>
			<function line="423" name="GetBlockCenter">
				<summary>function BlockEngine:GetBlockCenter(x,y,z)
get the block center, based on a real world position.
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="429" name="GetSparseIndex">
				<summary>function BlockEngine:GetSparseIndex(x, y, z)
get sparse index
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="435" name="FromSparseIndex">
				<summary>function BlockEngine:FromSparseIndex(index)
convert from sparse index to block x,y,z
   @return x,y,z
				</summary>
				<parameter name="index"/>
				<returns>return ,y,z
				</returns>
			</function>
			<function line="449" name="GetOppositeSide">
				<summary>function BlockEngine:GetOppositeSide(side)

				</summary>
				<parameter name="side"/>
			</function>
			<function line="455" name="GetBlockIndexBySide">
				<summary>function BlockEngine:GetBlockIndexBySide(x,y,z,side)

   @param x, y, z: block index
   @return: x,y,z nearby block index. 
				</summary>
				<parameter name="x">, y, z: block index
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="side"/>
				<returns>return x,y,z nearby block index. 
				</returns>
			</function>
			<function line="473" name="UpdateEyePosition">
				<summary>function BlockEngine:UpdateEyePosition(x, y, z)
update eye position
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="498" name="GetNextDynamicTypeInColumn">
				<summary>function BlockEngine:GetNextDynamicTypeInColumn(x,y,z, max_dist)
get the next dynamic object type in the block column x,z. It will start from the high y-1 and search downward, until one is found.
   @param max_dist: max dist to search downward. default to y.
   @return block_id, block_y: nil if no dynamic type is found downward. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="max_dist">max dist to search downward. default to y.
				</parameter>
				<returns>return , block_y: nil if no dynamic type is found downward. 
				</returns>
			</function>
			<function line="511" name="GetNextBlockOfTypeInColumn">
				<summary>function BlockEngine:GetNextBlockOfTypeInColumn(x,y,z, attr, max_dist)

   @param attr: bitwise field. default to block.attributes.onload (which is usually entity block)
   @return block_id, block_y: nil if no dynamic type is found downward. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="attr">bitwise field. default to block.attributes.onload (which is usually entity block)
				</parameter>
				<parameter name="max_dist"/>
				<returns>return , block_y: nil if no dynamic type is found downward. 
				</returns>
			</function>
			<function line="529" name="GetFirstBlock">
				<summary>function BlockEngine:GetFirstBlock(x, y, z, nBlockId, nSide, max_dist)
get the y pos of the first block of nBlockID, start searching from x, y, z in the side direction
   @param x,y,z: y default to 0
   @param nBlockId: the block id to search for
   @param nSide: default to 5, which is downward, 4 if upward.
   @param max_dist: default to 255
   @return -1 if not found
				</summary>
				<parameter name="x">,y,z: y default to 0
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="nBlockId">the block id to search for
				</parameter>
				<parameter name="nSide">default to 5, which is downward, 4 if upward.
				</parameter>
				<parameter name="max_dist">default to 255
				</parameter>
				<returns>return -1 if not found
				</returns>
			</function>
			<function line="534" name="FrameMove_Coroutine">
				<summary>function BlockEngine:FrameMove_Coroutine()
this is a coroutine and may yield every block_sim_per_frame framemove. 
				</summary>
			</function>
			<function line="559" name="OnFrameMove">
				<summary>function BlockEngine:OnFrameMove()
main loop of the block engine.
				</summary>
			</function>
			<function line="584" name="FrameMoveRegion">
				<summary>function BlockEngine:FrameMoveRegion(x, y, z, radius, radius_from)
frame move all dynamic block in given square region.
   @param x, y, z: the block index. y can be nil.
   @param radius:  the square region radius
   @param radius_from: default to nil or 0. if larger than 0, we will not simulate blocks which is in radius_from square. 
this allow us the framemove block with different interval according to distance to eye position. 
				</summary>
				<parameter name="x">, y, z: the block index. y can be nil.
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="radius">the square region radius
				</parameter>
				<parameter name="radius_from">default to nil or 0. if larger than 0, we will not simulate blocks which is in radius_from square. 
this allow us the framemove block with different interval according to distance to eye position. 
				</parameter>
			</function>
			<function line="622" name="FrameMoveColumn">
				<summary>function BlockEngine:FrameMoveColumn(x,y,z)
framemove all blocks below y, in the x, z columns from top to bottom.
   @param x, y, z: the block index. y can be nil.
				</summary>
				<parameter name="x">, y, z: the block index. y can be nil.
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="640" name="SetBlockToAir">
				<summary>function BlockEngine:SetBlockToAir(x,y,z, flag)
same as: BlockEngine:SetBlock(x,y,z,0, nil, flag)
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="flag"/>
			</function>
			<function line="644" name="MarkBlockForUpdate">
				<summary>function BlockEngine:MarkBlockForUpdate(x, y, z)

				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="650" name="IsRemote">
				<summary>function BlockEngine:IsRemote()

				</summary>
			</function>
			<function line="662" name="SetBlock">
				<summary>function BlockEngine:SetBlock(x,y,z,block_id, block_data, flag, entity_data)
Sets the block ID and metadata at a given location.
   @param flag: bitwise field. 1 will notify neighbor blocks. 2 or nil will be the default. 3 is update with notification to nearby blocks. 
0 will just set block without calling the block callback func.
   @param entity_data: table of xml node as entity_data
   @return true if a new block is created. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="block_id"/>
				<parameter name="block_data"/>
				<parameter name="flag">bitwise field. 1 will notify neighbor blocks. 2 or nil will be the default. 3 is update with notification to nearby blocks. 
0 will just set block without calling the block callback func.
				</parameter>
				<parameter name="entity_data">table of xml node as entity_data
				</parameter>
				<returns>return if a new block is created. 
				</returns>
			</function>
			<function line="716" name="SetBlockData">
				<summary>function BlockEngine:SetBlockData(x,y,z,block_data, flag)
Sets the block metadata at a given location.
   @param flag: bitwise field. 1 will notify neighbor blocks. 2 or nil will be the default
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="block_data"/>
				<parameter name="flag">bitwise field. 1 will notify neighbor blocks. 2 or nil will be the default
				</parameter>
			</function>
			<function line="735" name="SetBlockDataForced">
				<summary>function BlockEngine:SetBlockDataForced(x,y,z,block_data)

				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="block_data"/>
			</function>
			<function line="740" name="GetBlockData">
				<summary>function BlockEngine:GetBlockData(x,y,z)

				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="744" name="GetBlockId">
				<summary>function BlockEngine:GetBlockId(x,y,z)

				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="748" name="GetBlockIdAndData">
				<summary>function BlockEngine:GetBlockIdAndData(x, y, z)

				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="754" name="GetBlockFull">
				<summary>function BlockEngine:GetBlockFull(x,y,z)
get full info about a given block
   @return block_id, block_data, entity_data
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<returns>return , block_data, entity_data
				</returns>
			</function>
			<function line="774" name="GetBlockEntityData">
				<summary>function BlockEngine:GetBlockEntityData(x,y,z)

				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="784" name="GetBlockEntity">
				<summary>function BlockEngine:GetBlockEntity(x,y,z)

				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="791" name="GetBlockEntityList">
				<summary>function BlockEngine:GetBlockEntityList(from_x,from_y,from_z, to_x, to_y, to_z)

				</summary>
				<parameter name="from_x"/>
				<parameter name="from_y"/>
				<parameter name="from_z"/>
				<parameter name="to_x"/>
				<parameter name="to_y"/>
				<parameter name="to_z"/>
			</function>
			<function line="811" name="GetBlockFull">
				<summary>function BlockEngine:GetBlockFull(x,y,z)
get full info about a given block
   @return block_id, block_data, entity_data
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<returns>return , block_data, entity_data
				</returns>
			</function>
			<function line="832" name="GetAllBlocksInfoInAABB">
				<summary>function BlockEngine:GetAllBlocksInfoInAABB(aabb)
return array of {x,y,z, id, data, entity_data}
				</summary>
				<parameter name="aabb"/>
			</function>
			<function line="851" name="GetBlock">
				<summary>function BlockEngine:GetBlock(x,y,z)
return the block template object. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="859" name="GetBlockTemplateByIdx">
				<summary>function BlockEngine:GetBlockTemplateByIdx(bX, bY, bZ)
return the block template table. 
				</summary>
				<parameter name="bX"/>
				<parameter name="bY"/>
				<parameter name="bZ"/>
			</function>
			<function line="868" name="SetBlockTemplateByIdx">
				<summary>function BlockEngine.SetBlockTemplateByIdx(x,y,z,block_id, block_data)
Obsoleted: use BlockEngine:SetBlock
   @param x, y, z: the block index. 
				</summary>
				<parameter name="x">, y, z: the block index. 
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="block_id"/>
				<parameter name="block_data"/>
			</function>
			<function line="873" name="SetBlockUserDataByIdx">
				<summary>function BlockEngine.SetBlockUserDataByIdx(x,y,z,block_data)
Obsoleted: use BlockEngine:SetBlockData
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="block_data"/>
			</function>
			<function line="879" name="IsInLiquid">
				<summary>function BlockEngine:IsInLiquid(bX, bY, bZ)
is point under water
   @param bX, bY, bZ: if nil, we will use the camera eye position. 
				</summary>
				<parameter name="bX">, bY, bZ: if nil, we will use the camera eye position. 
				</parameter>
				<parameter name="bY"/>
				<parameter name="bZ"/>
			</function>
			<function line="894" name="IsInAir">
				<summary>function BlockEngine:IsInAir(x,y,z)
if all 6 neighbour are empty. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="906" name="IsInLiquidReal">
				<summary>function BlockEngine:IsInLiquidReal(realX, realY, realZ)
TODO: is point under water
   @param realX, realY, realZ: if nil, we will use the camera eye position. 
				</summary>
				<parameter name="realX">, realY, realZ: if nil, we will use the camera eye position. 
				</parameter>
				<parameter name="realY"/>
				<parameter name="realZ"/>
			</function>
			<function line="945" name="NotifyNeighborBlocksChange">
				<summary>function BlockEngine:NotifyNeighborBlocksChange(x, y, z, from_block_id)
Notifies all six neighboring blocks that from_block_id changed  
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="from_block_id"/>
			</function>
			<function line="956" name="NotifyNeighborBlocksChangeNoSide">
				<summary>function BlockEngine:NotifyNeighborBlocksChangeNoSide(x, y, z, from_block_id, side)
Notifies all six neighboring blocks that from_block_id changed, except the one on the given side.
   @param side: the block on this side is not notified. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="from_block_id"/>
				<parameter name="side">the block on this side is not notified. 
				</parameter>
			</function>
			<function line="985" name="OnNeighborBlockChange">
				<summary>function BlockEngine:OnNeighborBlockChange(x, y, z, from_block_id)
Notifies a block that one of its neighbor change to the specified type
   @param from_block_id: the block id that has changed
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="from_block_id">the block id that has changed
				</parameter>
			</function>
			<function line="996" name="GetBlockMaterial">
				<summary>function BlockEngine:GetBlockMaterial(x,y,z)
get block material
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1010" name="isBlockProvidingStrongPowerTo">
				<summary>function BlockEngine:isBlockProvidingStrongPowerTo(x, y, z, direction)
Is this block powering in the specified direction 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="direction"/>
			</function>
			<function line="1025" name="getBlockStrongPowerInput">
				<summary>function BlockEngine:getBlockStrongPowerInput(x,y,z)
Returns the highest strong power input from this block's six neighbors. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1062" name="hasWeakPowerOutputTo">
				<summary>function BlockEngine:hasWeakPowerOutputTo(x,y,z,dir)
Returns the weak power being outputted by the given block to the given direction.
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="dir"/>
			</function>
			<function line="1067" name="isBlockNormalCube">
				<summary>function BlockEngine:isBlockNormalCube(x,y,z)
Indicate if a material is a normal solid opaque cube.
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1074" name="getWeakPowerOutputTo">
				<summary>function BlockEngine:getWeakPowerOutputTo(x,y,z,dir)
Gets the indirect(weak) power level of this block to a given side. 
Normal cube block will output the highest strong power input as weak output to all of its six faces. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="dir"/>
			</function>
			<function line="1089" name="isBlockIndirectlyGettingPowered">
				<summary>function BlockEngine:isBlockIndirectlyGettingPowered(x, y, z)
Used to see if one of the blocks next to you or your block is getting power from a neighboring block. Used by
items like TNT or Doors so they don't have going straight into them.  
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1100" name="getStrongestIndirectPower">
				<summary>function BlockEngine:getStrongestIndirectPower(x, y, z)
get strongest indirect power from the neighboring 6 blocks. wires will transmit indirect power to its neighbor
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1120" name="DoesBlockHaveSolidTopSurface">
				<summary>function BlockEngine:DoesBlockHaveSolidTopSurface(x,y,z)
Performs check to see if the block is a normal, solid block, or if the metadata of the block indicates that its
facing puts its solid side upwards. (inverted stairs, for example)
Returns true if the block at the given coordinate has a solid (buildable) top surface.
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1130" name="Dump">
				<summary>function BlockEngine:Dump()
dump the current state of the block engine
				</summary>
			</function>
		</table>
		<table name="GameLogic" src="script/apps/Aries/Creator/Game/game_logic.lua">
			<function line="133" name="ctor">
				<summary>function GameLogic:ctor()
one time singleton init
				</summary>
			</function>
			<function line="157" name="InitAPIPath">
				<summary>function GameLogic:InitAPIPath()

				</summary>
			</function>
			<function line="181" name="InitMod">
				<summary>function GameLogic.InitMod()
static method called at the very beginning when paracraft start
				</summary>
			</function>
			<function line="192" name="InitCommon">
				<summary>function GameLogic.InitCommon()
called by both Init() and StaticInit()
				</summary>
			</function>
			<function line="224" name="Init">
				<summary>function GameLogic.Init(worldObj)
call this when user first enters a game world.
				</summary>
				<parameter name="worldObj"/>
			</function>
			<function line="296" name="OnBeforeBlockWorldLoaded">
				<summary>function GameLogic.OnBeforeBlockWorldLoaded()

				</summary>
			</function>
			<function line="307" name="GetWorld">
				<summary>function GameLogic.GetWorld()
get the current world. 
				</summary>
			</function>
			<function line="311" name="GetPlayerController">
				<summary>function GameLogic.GetPlayerController()

				</summary>
			</function>
			<function line="318" name="GetPlayer">
				<summary>function GameLogic.GetPlayer()

				</summary>
			</function>
			<function line="322" name="CreateGetAutoSaver">
				<summary>function GameLogic.CreateGetAutoSaver()

				</summary>
			</function>
			<function line="332" name="OnBeforeLoadBlockRegion">
				<summary>function GameLogic.OnBeforeLoadBlockRegion(bContinue, region_x, region_y)

   @return false to disable loading region from file
				</summary>
				<parameter name="bContinue"/>
				<parameter name="region_x"/>
				<parameter name="region_y"/>
				<returns>return to disable loading region from file
				</returns>
			</function>
			<function line="337" name="OnSaveBlockRegion">
				<summary>function GameLogic.OnSaveBlockRegion(bContinue, region_x, region_y, region_type)

				</summary>
				<parameter name="bContinue"/>
				<parameter name="region_x"/>
				<parameter name="region_y"/>
				<parameter name="region_type"/>
			</function>
			<function line="342" name="ReplaceWorld">
				<summary>function GameLogic.ReplaceWorld(world)
this is used to secretely replace current world object, such as from a standalone world into a multplayer worldserver. 
				</summary>
				<parameter name="world"/>
			</function>
			<function line="355" name="GetParticleManager">
				<summary>function GameLogic.GetParticleManager()

				</summary>
			</function>
			<function line="360" name="GetSaveHandler">
				<summary>function GameLogic.GetSaveHandler()
Returns the current world's current save handler
				</summary>
			</function>
			<function line="365" name="GetEvents">
				<summary>function GameLogic.GetEvents()
get events
				</summary>
			</function>
			<function line="373" name="GetProfile">
				<summary>function GameLogic.GetProfile()
get current user profile. 
				</summary>
			</function>
			<function line="378" name="GetBlockWorld">
				<summary>function GameLogic.GetBlockWorld()
get the block world raw pointer
				</summary>
			</function>
			<function line="388" name="SetBlockWorld">
				<summary>function GameLogic.SetBlockWorld(world)
set current block world.
				</summary>
				<parameter name="world"/>
			</function>
			<function line="392" name="GetTeacherAgent">
				<summary>function GameLogic.GetTeacherAgent()

				</summary>
			</function>
			<function line="400" name="SetTipText">
				<summary>function GameLogic.SetTipText(text, target, duration)
set cody's text
   @param text: any HTML text
   @param target: nil or "&lt;player&gt;"
   @param duration: in seconds
				</summary>
				<parameter name="text">any HTML text
				</parameter>
				<parameter name="target">nil or "&lt;player&gt;"
				</parameter>
				<parameter name="duration">in seconds
				</parameter>
			</function>
			<function line="406" name="HideTipText">
				<summary>function GameLogic.HideTipText(target)
hide cody's text
				</summary>
				<parameter name="target"/>
			</function>
			<function line="413" name="Login">
				<summary>function GameLogic.Login(server, callback)
login a given server
   @param server:if nil, it means the local server
				</summary>
				<parameter name="server">if nil, it means the local server
				</parameter>
				<parameter name="callback"/>
			</function>
			<function line="420" name="GetBlockGenerator">
				<summary>function GameLogic.GetBlockGenerator()

				</summary>
			</function>
			<function line="426" name="StaticInit">
				<summary>function GameLogic.StaticInit(load_level)
this function is used for loading static world without editing features.
   @param load_level: nil to load only blocks, 1 load NPC and neuron logics.
				</summary>
				<parameter name="load_level">nil to load only blocks, 1 load NPC and neuron logics.
				</parameter>
			</function>
			<function line="487" name="AutoFindLoginPos">
				<summary>function GameLogic.AutoFindLoginPos()
find the most suitable login position. 
				</summary>
			</function>
			<function line="493" name="Reset">
				<summary>function GameLogic.Reset()
clear all old game level objects. 
				</summary>
			</function>
			<function line="496" name="NewGame">
				<summary>function GameLogic.NewGame()

				</summary>
			</function>
			<function line="501" name="GetWorldDirectory">
				<summary>function GameLogic.GetWorldDirectory()
return current world directory (fast)
				</summary>
			</function>
			<function line="506" name="LoadGame">
				<summary>function GameLogic.LoadGame()
load from the current world directory. 
				</summary>
			</function>
			<function line="554" name="Pause">
				<summary>function GameLogic.Pause()

				</summary>
			</function>
			<function line="558" name="Resume">
				<summary>function GameLogic.Resume()

				</summary>
			</function>
			<function line="562" name="IsPaused">
				<summary>function GameLogic.IsPaused()

				</summary>
			</function>
			<function line="566" name="RemoveWorldFileWatcher">
				<summary>function GameLogic.RemoveWorldFileWatcher()

				</summary>
			</function>
			<function line="573" name="CheckCreateFileWatcher">
				<summary>function GameLogic.CheckCreateFileWatcher()

				</summary>
			</function>
			<function line="597" name="BuildResourceFilepath">
				<summary>function GameLogic.BuildResourceFilepath(filename)
build resource filepath
   @param filename: relative to current world directory. 
				</summary>
				<parameter name="filename">relative to current world directory. 
				</parameter>
			</function>
			<function line="603" name="ToggleGameMode">
				<summary>function GameLogic.ToggleGameMode()

				</summary>
			</function>
			<function line="614" name="ToggleFly">
				<summary>function GameLogic.ToggleFly()

				</summary>
			</function>
			<function line="633" name="GetPickingDist">
				<summary>function GameLogic.GetPickingDist()

				</summary>
			</function>
			<function line="638" name="QuickSave">
				<summary>function GameLogic.QuickSave()
call this function every 1 min
				</summary>
			</function>
			<function line="642" name="GetUnSavedTime">
				<summary>function GameLogic.GetUnSavedTime()

				</summary>
			</function>
			<function line="647" name="SaveAll">
				<summary>function GameLogic.SaveAll(bSaveToLastSaveFolder)

   @param bSaveToLastSaveFolder: whether to save block to "blockworld.lastsave" folder
				</summary>
				<parameter name="bSaveToLastSaveFolder">whether to save block to "blockworld.lastsave" folder
				</parameter>
			</function>
			<function line="690" name="PlayAnimation">
				<summary>function GameLogic.PlayAnimation(params)
let a given character to play an animation.
   @param params: {nid, animationName=string, facingTarget={x,y,z}}
				</summary>
				<parameter name="params">{nid, animationName=string, facingTarget={x,y,z}}
				</parameter>
			</function>
			<function line="703" name="Exit">
				<summary>function GameLogic.Exit()

				</summary>
			</function>
			<function line="775" name="GetCodeGlobal">
				<summary>function GameLogic.GetCodeGlobal()
global sandbox user defined variables in the world. It is recreated on each world load on demand.
   @return CodeGlobals object associated with the current world.
				</summary>
				<returns>return object associated with the current world.
				</returns>
			</function>
			<function line="784" name="CheckTickShiftWalkingMode">
				<summary>function GameLogic.CheckTickShiftWalkingMode()

				</summary>
			</function>
			<function line="796" name="GetCurrentPlayerObj">
				<summary>function GameLogic.GetCurrentPlayerObj()

				</summary>
			</function>
			<function line="805" name="CheckCurrentPlayerLocation">
				<summary>function GameLogic.CheckCurrentPlayerLocation()
ensure the player never goes too high or too low. If too low, it should die in game mode. 
disable fly mode, if player feet is on ground
				</summary>
			</function>
			<function line="855" name="IsRemoteWorld">
				<summary>function GameLogic.IsRemoteWorld()
if true, we will disable all block entity simulation on the local world. 
				</summary>
			</function>
			<function line="860" name="IsServerWorld">
				<summary>function GameLogic.IsServerWorld()
if true, the entity may need to send update to clients. 
				</summary>
			</function>
			<function line="866" name="SetIsRemoteWorld">
				<summary>function GameLogic.SetIsRemoteWorld(bRemoteWorld, bIsServerWorld)
if true, we will disable all block entity simulation on the local world.
   @param bRemoteWorld: this is set to true, if self.world is a WorldClient type. 
				</summary>
				<parameter name="bRemoteWorld">this is set to true, if self.world is a WorldClient type. 
				</parameter>
				<parameter name="bIsServerWorld"/>
			</function>
			<function line="872" name="IsTick">
				<summary>function GameLogic:IsTick(deltaTime)

				</summary>
				<parameter name="deltaTime"/>
			</function>
			<function line="880" name="FrameMove">
				<summary>function GameLogic.FrameMove(timer)
called 30 FPS framemove.
				</summary>
				<parameter name="timer"/>
			</function>
			<function line="934" name="OnDead">
				<summary>function GameLogic.OnDead()

				</summary>
			</function>
			<function line="940" name="RunCommand">
				<summary>function GameLogic.RunCommand(...)

				</summary>
			</function>
			<function line="944" name="RefreshPlayerDensity">
				<summary>function GameLogic.RefreshPlayerDensity()

				</summary>
			</function>
			<function line="968" name="CanCollectItem">
				<summary>function GameLogic.CanCollectItem()
whether we can collect items when player hit it. 
				</summary>
			</function>
			<function line="975" name="IsReadOnly">
				<summary>function GameLogic.IsReadOnly()
whether we can edit the world 
				</summary>
			</function>
			<function line="980" name="CheckReadOnly">
				<summary>function GameLogic.CheckReadOnly()
return true if read only and display a message box. 
				</summary>
			</function>
			<function line="988" name="SetMode">
				<summary>function GameLogic.SetMode(mode, bFireModeChangeEvent)
set mode 
				</summary>
				<parameter name="mode"/>
				<parameter name="bFireModeChangeEvent"/>
			</function>
			<function line="1000" name="EnterGameMode">
				<summary>function GameLogic.EnterGameMode(bIsSurvival)
call this to enter game mode and begin to spawn all kinds of creatures and display game UI 
				</summary>
				<parameter name="bIsSurvival"/>
			</function>
			<function line="1014" name="EnterEditorMode">
				<summary>function GameLogic.EnterEditorMode()
call this to enter editor mode and disable game creature AI and display editor UI 
				</summary>
			</function>
			<function line="1018" name="EnterTutorialMode">
				<summary>function GameLogic.EnterTutorialMode()

				</summary>
			</function>
			<function line="1023" name="EnterMovieMode">
				<summary>function GameLogic.EnterMovieMode()
call this to enter editor mode and disable game creature AI and display editor UI 
				</summary>
			</function>
			<function line="1029" name="GetMode">
				<summary>function GameLogic.GetMode()
get the current game mode
   @return "game", "editor", "survival"
				</summary>
				<returns>return "game", "editor", "survival"
				</returns>
			</function>
			<function line="1034" name="GetBlockInRightHand">
				<summary>function GameLogic.GetBlockInRightHand()
return the block id in the right hand of the player. 
				</summary>
			</function>
			<function line="1038" name="SetBlockInRightHand">
				<summary>function GameLogic.SetBlockInRightHand(blockid_or_item_stack)

				</summary>
				<parameter name="blockid_or_item_stack"/>
			</function>
			<function line="1046" name="CreateObject">
				<summary>function GameLogic.CreateObject(name, x, y, z, bAddToHistory)
create a game object at the given position. 
please note that all creation must ensure a closed space.
   @param name: tons of object types can be created.
   @param bAddToHistory: true to add to history for a possible undo function in future. Only some object support history.
				</summary>
				<parameter name="name">tons of object types can be created.
				</parameter>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="bAddToHistory">true to add to history for a possible undo function in future. Only some object support history.
				</parameter>
			</function>
			<function line="1104" name="UndoBlock">
				<summary>function GameLogic.UndoBlock()
undo the block creation, only for testing
				</summary>
			</function>
			<function line="1114" name="CreatePortal">
				<summary>function GameLogic.CreatePortal(x, y, z)
create a portal at the current player's position to the block world.
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1120" name="GotoBlockWorld">
				<summary>function GameLogic.GotoBlockWorld()
teleport the user to the closest block world teleport position. If there is no such a position, we will create one in the block world. 
				</summary>
			</function>
			<function line="1132" name="TeleportPlayer">
				<summary>function GameLogic.TeleportPlayer(x, y, z)
teleport the current player to a givn position. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1136" name="GetPlayerPosition">
				<summary>function GameLogic.GetPlayerPosition()

				</summary>
			</function>
			<function line="1141" name="IsOwner">
				<summary>function GameLogic.IsOwner()
is owner
				</summary>
			</function>
			<function line="1147" name="GotoOverworld">
				<summary>function GameLogic.GotoOverworld()
teleport the user to the over world at the current block world position. 
				</summary>
			</function>
			<function line="1158" name="GetNearestNPC">
				<summary>function GameLogic.GetNearestNPC(radius)
get the nearest npc around the current player position.
   @param radius: we will search for all npcs within this radius. if nil, it is 6 meters
   @return npc_object, dist: nil may be returned if not found. 
				</summary>
				<parameter name="radius">we will search for all npcs within this radius. if nil, it is 6 meters
				</parameter>
				<returns>return , dist: nil may be returned if not found. 
				</returns>
			</function>
			<function line="1185" name="WalkForward">
				<summary>function GameLogic.WalkForward()

				</summary>
			</function>
			<function line="1197" name="TalkToNearestNPC">
				<summary>function GameLogic.TalkToNearestNPC()
talk with the nearest npc if any. 
				</summary>
			</function>
			<function line="1209" name="DoJump">
				<summary>function GameLogic.DoJump()

				</summary>
			</function>
			<function line="1263" name="SetTouchMode">
				<summary>function GameLogic.SetTouchMode(mode)

   @param mode: "add", "del"
				</summary>
				<parameter name="mode">"add", "del"
				</parameter>
			</function>
			<function line="1268" name="GetTouchMode">
				<summary>function GameLogic.GetTouchMode()

   @return: "add", "del"
				</summary>
				<returns>return "add", "del"
				</returns>
			</function>
			<function line="1274" name="SetHomePosition">
				<summary>function GameLogic.SetHomePosition(x,y,z)
set player home position.
   @param x, y, z: if nil, the current player position is used. 
				</summary>
				<parameter name="x">, y, z: if nil, the current player position is used. 
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1279" name="GetHomePosition">
				<summary>function GameLogic.GetHomePosition()
get player home spawn position. 
				</summary>
			</function>
			<function line="1284" name="GetDesktopEntity">
				<summary>function GameLogic.GetDesktopEntity()
create get desktop entity
				</summary>
			</function>
			<function line="1300" name="GetSkyEntity">
				<summary>function GameLogic.GetSkyEntity()
create get sky entity
				</summary>
			</function>
			<function line="1314" name="GetFreeCamera">
				<summary>function GameLogic.GetFreeCamera()
create get free camera entity
				</summary>
			</function>
			<function line="1334" name="GetHomeEntity">
				<summary>function GameLogic.GetHomeEntity()
may return nil if there is no home entity. 
				</summary>
			</function>
			<function line="1340" name="AppendChat">
				<summary>function GameLogic.AppendChat(text, entity)
append chat message
   @param entity: if not nil, entity display name is prepended
				</summary>
				<parameter name="text"/>
				<parameter name="entity">if not nil, entity display name is prepended
				</parameter>
			</function>
			<function line="1361" name="ShowMsg">
				<summary>function GameLogic.ShowMsg(text, level)
display message such as script syntax or runtime error.
   @param level: default to 1, which only show in bbs window. 
				</summary>
				<parameter name="text"/>
				<parameter name="level">default to 1, which only show in bbs window. 
				</parameter>
			</function>
			<function line="1387" name="ToggleRunning">
				<summary>function GameLogic.ToggleRunning(bRunning)

				</summary>
				<parameter name="bRunning"/>
			</function>
			<function line="1411" name="OnCameraFrameMove">
				<summary>function GameLogic.OnCameraFrameMove()

				</summary>
			</function>
			<function line="1436" name="GetShaderManager">
				<summary>function GameLogic.GetShaderManager()

				</summary>
			</function>
			<function line="1446" name="ToggleDesktop">
				<summary>function GameLogic.ToggleDesktop(name)
toggle desktop view
				</summary>
				<parameter name="name"/>
			</function>
			<function line="1475" name="OnToggleViewBobbing">
				<summary>function GameLogic.OnToggleViewBobbing(bChecked)

				</summary>
				<parameter name="bChecked"/>
			</function>
			<function line="1479" name="OnToggleLockMouseWheel">
				<summary>function GameLogic.OnToggleLockMouseWheel(bChecked)

				</summary>
				<parameter name="bChecked"/>
			</function>
			<function line="1485" name="AddBBS">
				<summary>function GameLogic.AddBBS(channel, text, max_duration, color)

   @param text: nil to clear text on that channel.
e.g. GameLogic.AddBBS("channel", format("hi"), 4000, "0 255 0")
				</summary>
				<parameter name="channel"/>
				<parameter name="text">nil to clear text on that channel.
e.g. GameLogic.AddBBS("channel", format("hi"), 4000, "0 255 0")
				</parameter>
				<parameter name="max_duration"/>
				<parameter name="color"/>
			</function>
			<function line="1490" name="SetStatus">
				<summary>function GameLogic.SetStatus(text)

   @param text: text to show in the status bar.  if nil, it will clear it. 
				</summary>
				<parameter name="text">text to show in the status bar.  if nil, it will clear it. 
				</parameter>
			</function>
			<function line="1494" name="OnToggleUIScaling">
				<summary>function GameLogic.OnToggleUIScaling(bChecked)

				</summary>
				<parameter name="bChecked"/>
			</function>
			<function line="1500" name="ToggleCamera">
				<summary>function GameLogic.ToggleCamera(IsFPSView)

   @param IsFPSView: nil to toggle, otherwise to set
				</summary>
				<parameter name="IsFPSView">nil to toggle, otherwise to set
				</parameter>
			</function>
			<function line="1505" name="GetSim">
				<summary>function GameLogic.GetSim()
get world simulator
				</summary>
			</function>
			<function line="1509" name="GetCurrentSelection">
				<summary>function GameLogic.GetCurrentSelection()

				</summary>
			</function>
			<function line="1515" name="GetFilters">
				<summary>function GameLogic.GetFilters()
filters are only used by plugins, mods. Standard customization should use Entity:event() and rule bag items.
some commands, or items use filters for plugin functions. 
				</summary>
			</function>
			<function line="1525" name="ActivateDefaultContext">
				<summary>function GameLogic.ActivateDefaultContext()
please note this function may return nil if context can not be switched since we are in the middle of some operation. 
				</summary>
			</function>
			<function line="1530" name="GetSceneContext">
				<summary>function GameLogic.GetSceneContext()
get current scene context
				</summary>
			</function>
			<function line="1535" name="UserAction">
				<summary>function GameLogic:UserAction(name)
record a user action to keep track of user behavior. 
				</summary>
				<parameter name="name"/>
			</function>
			<function line="1541" name="GetLastUserAction">
				<summary>function GameLogic:GetLastUserAction()

				</summary>
			</function>
			<function line="1546" name="GetText">
				<summary>function GameLogic:GetText(text)
get a translated text
				</summary>
				<parameter name="text"/>
			</function>
			<function line="1552" name="event">
				<summary>function GameLogic:event(event)
global custom user or game event
				</summary>
				<parameter name="event"/>
			</function>
		</table>
		<table name="CmdParser" src="script/apps/Aries/Creator/Game/Commands/CmdParser.lua">
			<function line="39" name="ParsePlayer">
				<summary>function CmdParser.ParsePlayer(cmd_text, fromEntity)

   @param cmd_text:
   @p or @[playername]. if
   @p it is the last triggering entity or current player. 
if
   @self, it is the fromEntity. if
   @a, it means closest nearby player. 
return player_entity, cmd_text_remain, hasInputName
				</summary>
				<parameter name="cmd_text">
				</parameter>
				<parameter name="fromEntity"/>
			</function>
			<function line="58" name="ParseEntities">
				<summary>function CmdParser.ParseEntities(cmd_text, fromEntity)
get array of entities using with given filter conditions.  This is advanced way of CmdParser.ParsePlayer
   @param cmd_text:
   @category{name=value, ...}, such as '
   @e{r=10, type="Railcar"}'
   @return entities, cmd_text_remain: entities may be nil, empty table, or entity array. 
				</summary>
				<parameter name="cmd_text">
				</parameter>
				<parameter name="fromEntity"/>
				<returns>return , cmd_text_remain: entities may be nil, empty table, or entity array. 
				</returns>
			</function>
			<function line="82" name="ParsePos">
				<summary>function CmdParser.ParsePos(cmd_text, entity)
3d position absolute or relative with ~
e.g. "20000 0 20000" or "~ ~1 ~" or "~1 ~-2 ~-3"
return x,y,z, cmd_text_remain: cmd_text_remaining is remaining unparsed text. 
				</summary>
				<parameter name="cmd_text"/>
				<parameter name="entity"/>
			</function>
			<function line="118" name="ParsePosInBrackets">
				<summary>function CmdParser.ParsePosInBrackets(cmd_text)
additional pos in brackets like "(2 -1 0)", "(2 ~ ~)"
				</summary>
				<parameter name="cmd_text"/>
			</function>
			<function line="150" name="ParseBlockId">
				<summary>function CmdParser.ParseBlockId(cmd_text)
block_id can be number or block name.
return block_id, cmd_text_remain
				</summary>
				<parameter name="cmd_text"/>
			</function>
		</table>
		<table name="CommandManager" src="script/apps/Aries/Creator/Game/Commands/CommandManager.lua">
			<function line="32" name="Init">
				<summary>function CommandManager:Init()
call this when command
				</summary>
			</function>
			<function line="88" name="RunCommand">
				<summary>function CommandManager:RunCommand(cmd_name, cmd_text, ...)
run one text command
   @param cmd_name: this can be command name or full command text that begin with "/" or nothing. 
				</summary>
				<parameter name="cmd_name">this can be command name or full command text that begin with "/" or nothing. 
				</parameter>
				<parameter name="cmd_text"/>
			</function>
			<function line="104" name="GetCommandName">
				<summary>function CommandManager:GetCommandName(cmd_text)

				</summary>
				<parameter name="cmd_text"/>
			</function>
			<function line="111" name="RunText">
				<summary>function CommandManager:RunText(text, ...)
run text with may contain one or several commands. 
it will treat ; or \r\n as a new line of command
   @param ...: ususally fromEntity, 
				</summary>
				<parameter name="text"/>
			</function>
			<function line="123" name="RunInlineCommand">
				<summary>function CommandManager:RunInlineCommand(cmd_text, ...)
like linux bash shell, text inside $() is regarded as inline command, whose returned value is used in current command. 
brackets can be nested
   @return the new cmd_text after inline command is executed. 
				</summary>
				<parameter name="cmd_text"/>
				<returns>return new cmd_text after inline command is executed. 
				</returns>
			</function>
			<function line="147" name="Run">
				<summary>function CommandManager:Run(cmd, ... )
run commands
   @return p1, p2: if p1 is false, then p2 is the label name where to goto. If p2 is nil, it means end of all lines. 
if p1 is not false, such as nil or any other value, the next command will be invoked normally. 
				</summary>
				<parameter name="cmd"/>
				<returns>return , p2: if p1 is false, then p2 is the label name where to goto. If p2 is nil, it means end of all lines. 
if p1 is not false, such as nil or any other value, the next command will be invoked normally. 
				</returns>
			</function>
			<function line="152" name="GetCmdByString">
				<summary>function CommandManager:GetCmdByString(cmd)

   @return cmd_class, cmd_name, cmd_text;
				</summary>
				<parameter name="cmd"/>
				<returns>return , cmd_name, cmd_text;
				</returns>
			</function>
			<function line="167" name="RunWithVariables">
				<summary>function CommandManager:RunWithVariables(variables, cmd, ...)

   @param variables: nil or a must be an object containning Compile() function.
   @return p1, p2: if p1 is false, then p2 is the label name where to goto. If p2 is nil, it means end of all lines. 
if p1 is not false, such as nil or any other value, the next command will be invoked normally. 
				</summary>
				<parameter name="variables">nil or a must be an object containning Compile() function.
				</parameter>
				<parameter name="cmd"/>
				<returns>return , p2: if p1 is false, then p2 is the label name where to goto. If p2 is nil, it means end of all lines. 
if p1 is not false, such as nil or any other value, the next command will be invoked normally. 
				</returns>
			</function>
			<function line="185" name="RunFromConsole">
				<summary>function CommandManager:RunFromConsole(cmd, player)
run command from console for the current player
   @param player: fromEntity, if nil, this is current player. last trigger entity is also set to this player. 
after command is run, it will set back to previous value. 
				</summary>
				<parameter name="cmd"/>
				<parameter name="player">fromEntity, if nil, this is current player. last trigger entity is also set to this player. 
after command is run, it will set back to previous value. 
				</parameter>
			</function>
			<function line="223" name="Destroy">
				<summary>function CommandManager:Destroy()
destroy the command manager
				</summary>
			</function>
			<function line="235" name="Register">
				<summary>function CommandManager:Register(slash_command)
call this function to register the slash command and init
				</summary>
				<parameter name="slash_command"/>
			</function>
			<function line="251" name="GetCmdList">
				<summary>function CommandManager:GetCmdList(cmds_str, line_reg_exp)
get command list
   @param line_reg_exp: default to "([%-]*)%s*(/?[^\r\n]+)", change this if one uses different line endings. 
				</summary>
				<parameter name="cmds_str"/>
				<parameter name="line_reg_exp">default to "([%-]*)%s*(/?[^\r\n]+)", change this if one uses different line endings. 
				</parameter>
			</function>
			<function line="272" name="CallFunction">
				<summary>function CommandManager:CallFunction(cmd_list, func_name, variables, fromEntity)

   @param cmd_list: array of command text. if nil, the current command list is used.
   @param func_name: function name, 
function [name]  
-- cmd here will be called. 
functionend
return true, function_return_value:  if function is found and called. otherwise return nil;
				</summary>
				<parameter name="cmd_list">array of command text. if nil, the current command list is used.
				</parameter>
				<parameter name="func_name">function name, 
function [name]  
-- cmd here will be called. 
functionend
return true, function_return_value:  if function is found and called. otherwise return nil;
				</parameter>
				<parameter name="variables"/>
				<parameter name="fromEntity"/>
			</function>
			<function line="306" name="GetCurrentCmdList">
				<summary>function CommandManager:GetCurrentCmdList()
get the current command list if any that is being executed;
				</summary>
			</function>
			<function line="314" name="RunCmdSegment">
				<summary>function CommandManager:RunCmdSegment(cmd_list, fromLine, toLine, variables, fromEntity)
run command from fromLine to toLine
   @param cmd_list: array of cmd strings
   @param fromLine: default to 1
   @param toLine: default to #cmd_list
				</summary>
				<parameter name="cmd_list">array of cmd strings
				</parameter>
				<parameter name="fromLine">default to 1
				</parameter>
				<parameter name="toLine">default to #cmd_list
				</parameter>
				<parameter name="variables"/>
				<parameter name="fromEntity"/>
			</function>
			<function line="425" name="RunCmdList">
				<summary>function CommandManager:RunCmdList(cmd_list, variables, fromEntity)
run command list and return the result. 
				</summary>
				<parameter name="cmd_list"/>
				<parameter name="variables"/>
				<parameter name="fromEntity"/>
			</function>
			<function line="430" name="LoadCmdHelpFile">
				<summary>function CommandManager:LoadCmdHelpFile()

				</summary>
			</function>
			<function line="539" name="GetCmdHelpDS">
				<summary>function CommandManager:GetCmdHelpDS()
lazy load all command help
				</summary>
			</function>
			<function line="546" name="GetCmdTypeDS">
				<summary>function CommandManager:GetCmdTypeDS()

				</summary>
			</function>
		</table>
		<table name="EntityManager" src="script/apps/Aries/Creator/Game/Entity/EntityManager.lua">
			<function line="91" name="RegisterEntities">
				<summary>function EntityManager.RegisterEntities()

				</summary>
			</function>
			<function line="132" name="RegisterEntityClass">
				<summary>function EntityManager.RegisterEntityClass(name, entity)
register a new entity class
				</summary>
				<parameter name="name"/>
				<parameter name="entity"/>
			</function>
			<function line="137" name="GetEntityClass">
				<summary>function EntityManager.GetEntityClass(class_name)
get entity class
				</summary>
				<parameter name="class_name"/>
			</function>
			<function line="146" name="GetChild">
				<summary>function EntityManager:GetChild(sName)
-------------------------------
attribute interface
-------------------------------
get child attribute object. this can be regarded as an intrusive data model of a given object. 
once you get an attribute object, you can use this model class to access all data in the hierarchy.
				</summary>
				<parameter name="sName"/>
			</function>
			<function line="151" name="GetChildAt">
				<summary>function EntityManager:GetChildAt(nRowIndex, nColumnIndex)

   @param nColumnIndex: nil to default to 0;
				</summary>
				<parameter name="nRowIndex"/>
				<parameter name="nColumnIndex">nil to default to 0;
				</parameter>
			</function>
			<function line="162" name="GetChildCount">
				<summary>function EntityManager:GetChildCount(nColumnIndex)

   @param nColumnIndex: if nil, default to 0. 
				</summary>
				<parameter name="nColumnIndex">if nil, default to 0. 
				</parameter>
			</function>
			<function line="171" name="Clear">
				<summary>function EntityManager.Clear()

				</summary>
			</function>
			<function line="199" name="IsBlocked">
				<summary>function EntityManager.IsBlocked(bx, by, bz)
whether the given block is blocked. 
TODO: cache the query result for a single framemove. this function may be called many times in a single frame. 
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
			</function>
			<function line="205" name="AddObject">
				<summary>function EntityManager.AddObject(entity)
add entity. 
				</summary>
				<parameter name="entity"/>
			</function>
			<function line="230" name="AddEntityCount">
				<summary>function EntityManager.AddEntityCount(item_id, delta_count)

				</summary>
				<parameter name="item_id"/>
				<parameter name="delta_count"/>
			</function>
			<function line="237" name="RemoveObject">
				<summary>function EntityManager.RemoveObject(entity)
remove entity from manager. 
				</summary>
				<parameter name="entity"/>
			</function>
			<function line="257" name="GetAllEntities">
				<summary>function EntityManager.GetAllEntities()

				</summary>
			</function>
			<function line="262" name="GetItemCount">
				<summary>function EntityManager.GetItemCount(item_id)
get item count by block_id
				</summary>
				<parameter name="item_id"/>
			</function>
			<function line="269" name="LoadFromFile">
				<summary>function EntityManager.LoadFromFile(filename)
Load all entity data from a given XML file.
   @param filename: if nil, it search the "[currentworld]/entity.xml"
   @return true if there is local NPC file. or nil if not. 
				</summary>
				<parameter name="filename">if nil, it search the "[currentworld]/entity.xml"
				</parameter>
				<returns>return if there is local NPC file. or nil if not. 
				</returns>
			</function>
			<function line="291" name="InitPlayers">
				<summary>function EntityManager.InitPlayers()
init player. Set and load current player. 
				</summary>
			</function>
			<function line="305" name="GetPlayerFileName">
				<summary>function EntityManager.GetPlayerFileName(name)

				</summary>
				<parameter name="name"/>
			</function>
			<function line="310" name="CheckNoEntityCollision">
				<summary>function EntityManager.CheckNoEntityCollision(x,y,z, excludingEntity)
Returns true if there are no solid, live entities in the specified location, excluding the given entity
   @param excludingEntity: usually the current player. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="excludingEntity">usually the current player. 
				</parameter>
			</function>
			<function line="323" name="GetLastTriggerEntity">
				<summary>function EntityManager.GetLastTriggerEntity()
the lastest trigger entity, such as the one that pressed a button or step on a pressure plat, etc.  
				</summary>
			</function>
			<function line="328" name="SetLastTriggerEntity">
				<summary>function EntityManager.SetLastTriggerEntity(entity)
set lastest trigger entity. 
				</summary>
				<parameter name="entity"/>
			</function>
			<function line="333" name="LoadPlayer">
				<summary>function EntityManager.LoadPlayer(name)
get or load or create a player of the given name. 
				</summary>
				<parameter name="name"/>
			</function>
			<function line="353" name="SetMainPlayer">
				<summary>function EntityManager.SetMainPlayer(playerEntity)
set the main player that is being controlled. After this call, EntityManager.GetPlayer() will return the given player. 
the main player is always the player being controlled by the PlayerController.
   @param playerEntity: this could be EntityPlayerMP for server player, or EntityPlayer for standalone player, or EntityPlayerMPClient for client side main player
   @return: the previous player if any. 
				</summary>
				<parameter name="playerEntity">this could be EntityPlayerMP for server player, or EntityPlayer for standalone player, or EntityPlayerMPClient for client side main player
				</parameter>
				<returns>return the previous player if any. 
				</returns>
			</function>
			<function line="364" name="SaveAllPlayers">
				<summary>function EntityManager.SaveAllPlayers()

				</summary>
			</function>
			<function line="377" name="GetPlayer">
				<summary>function EntityManager.GetPlayer(name)
get player
   @param name: if nil or "player", the current player is returned. 
				</summary>
				<parameter name="name">if nil or "player", the current player is returned. 
				</parameter>
			</function>
			<function line="386" name="GetEntityByObjectID">
				<summary>function EntityManager.GetEntityByObjectID(obj_id)
get entity
				</summary>
				<parameter name="obj_id"/>
			</function>
			<function line="391" name="GetEntity">
				<summary>function EntityManager.GetEntity(name)
get by name. 
				</summary>
				<parameter name="name"/>
			</function>
			<function line="398" name="GetEntityById">
				<summary>function EntityManager.GetEntityById(entityId)
get by id. 
				</summary>
				<parameter name="entityId"/>
			</function>
			<function line="405" name="RenameEntity">
				<summary>function EntityManager.RenameEntity(entity, old_name, new_name)
rename a given entity in the manager. 
				</summary>
				<parameter name="entity"/>
				<parameter name="old_name"/>
				<parameter name="new_name"/>
			</function>
			<function line="419" name="GetEntitiesByItemID">
				<summary>function EntityManager.GetEntitiesByItemID(item_id)
get all entities by block id.
   @return nil or array of entities. 
				</summary>
				<parameter name="item_id"/>
				<returns>return or array of entities. 
				</returns>
			</function>
			<function line="430" name="SetEntityByObjectID">
				<summary>function EntityManager.SetEntityByObjectID(obj_id, entity)

				</summary>
				<parameter name="obj_id"/>
				<parameter name="entity"/>
			</function>
			<function line="436" name="HasEntityInBlock">
				<summary>function EntityManager.HasEntityInBlock(bx, by, bz)
return true if there is at least one entity at the blocok position. 
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
			</function>
			<function line="447" name="HasNonPlayerEntityInBlock">
				<summary>function EntityManager.HasNonPlayerEntityInBlock(bx, by, bz)
has non-player entity
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
			</function>
			<function line="459" name="GetEntitiesInBlock">
				<summary>function EntityManager.GetEntitiesInBlock(bx, by, bz)
get all entities in block. 
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
			</function>
			<function line="468" name="GetBlockEntity">
				<summary>function EntityManager.GetBlockEntity(bx, by, bz)
get the block entity excluding other entity
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
			</function>
			<function line="476" name="GetEntityInBlock">
				<summary>function EntityManager.GetEntityInBlock(bx, by, bz, class_name)
get the first entity that matches the class_name
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
				<parameter name="class_name"/>
			</function>
			<function line="488" name="GetEntitiesByAABBOfType">
				<summary>function EntityManager.GetEntitiesByAABBOfType(entity_class, aabb)

   @param entity_class: nil to match any entity. 
				</summary>
				<parameter name="entity_class">nil to match any entity. 
				</parameter>
				<parameter name="aabb"/>
			</function>
			<function line="516" name="GetEntitiesByAABBExcept">
				<summary>function EntityManager.GetEntitiesByAABBExcept(aabb, excludingEntity)
Will get all entities within the specified AABB excluding the one passed into it. Args: entityToExclude, aabb
   @return array of entities
				</summary>
				<parameter name="aabb"/>
				<parameter name="excludingEntity"/>
				<returns>return of entities
				</returns>
			</function>
			<function line="545" name="RemoveBlockEntity">
				<summary>function EntityManager.RemoveBlockEntity(bx, by, bz, class_name)
remove entity by its class_name at the given block position. 
all matching entities will be removed. 
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
				<parameter name="class_name"/>
			</function>
			<function line="572" name="GetBlockContainer">
				<summary>function EntityManager.GetBlockContainer(bx,by,bz)
private: 
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
			</function>
			<function line="584" name="SetBlockContainer">
				<summary>function EntityManager.SetBlockContainer(bx,by,bz, block_container)

				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
				<parameter name="block_container"/>
			</function>
			<function line="591" name="GetEntitiesInChunkColumn">
				<summary>function EntityManager.GetEntitiesInChunkColumn(cx, cz, bCreateIfNotExist)

   @param cx, cz: chunk pos, if cz is nil, cx is packed index
return array of all entities in a given chunk column
				</summary>
				<parameter name="cx">, cz: chunk pos, if cz is nil, cx is packed index
return array of all entities in a given chunk column
				</parameter>
				<parameter name="cz"/>
				<parameter name="bCreateIfNotExist"/>
			</function>
			<function line="602" name="GetRegionContainer">
				<summary>function EntityManager.GetRegionContainer(bx,bz)
get region object
				</summary>
				<parameter name="bx"/>
				<parameter name="bz"/>
			</function>
			<function line="617" name="SaveToFile">
				<summary>function EntityManager.SaveToFile(bSaveToLastSaveFolder)

				</summary>
				<parameter name="bSaveToLastSaveFolder"/>
			</function>
			<function line="673" name="SetChunkActive">
				<summary>function EntityManager.SetChunkActive(chunkX, chunkZ, isActive)

   @param chunkX, chunkZ: chunk pos, if chunkZ is nil, chunkX is packed index
make the chunk at location always active or not. 
				</summary>
				<parameter name="chunkX">, chunkZ: chunk pos, if chunkZ is nil, chunkX is packed index
make the chunk at location always active or not. 
				</parameter>
				<parameter name="chunkZ"/>
				<parameter name="isActive"/>
			</function>
			<function line="690" name="TickChunk">
				<summary>function EntityManager.TickChunk(chunkX, chunkZ, tick)

   @param chunkX, chunkZ: chunk pos, if chunkZ is nil, chunkX is packed index
   @param tick: if nil, default to current frame_count
				</summary>
				<parameter name="chunkX">, chunkZ: chunk pos, if chunkZ is nil, chunkX is packed index
				</parameter>
				<parameter name="chunkZ"/>
				<parameter name="tick">if nil, default to current frame_count
				</parameter>
			</function>
			<function line="700" name="AddToSentientList">
				<summary>function EntityManager.AddToSentientList(entity)
set an entity so that its framemove function should always be called regardless of player position
				</summary>
				<parameter name="entity"/>
			</function>
			<function line="707" name="RemoveFromSentientList">
				<summary>function EntityManager.RemoveFromSentientList(entity)
remove an entity so that its framemove function should not be called unless it falls into player sensible range.
				</summary>
				<parameter name="entity"/>
			</function>
			<function line="722" name="GetDeltaTime">
				<summary>function EntityManager:GetDeltaTime()

				</summary>
			</function>
			<function line="727" name="FrameMove">
				<summary>function EntityManager.FrameMove(deltaTime)
called every frame to simulate objects 
				</summary>
				<parameter name="deltaTime"/>
			</function>
			<function line="777" name="FrameMoveQueueThisFrame">
				<summary>function EntityManager.FrameMoveQueueThisFrame(deltaTime, cur_time, destroy_list)
pending list to framemove
				</summary>
				<parameter name="deltaTime"/>
				<parameter name="cur_time"/>
				<parameter name="destroy_list"/>
			</function>
			<function line="787" name="SetFocus">
				<summary>function EntityManager.SetFocus(entity)
set focus to the given entity. 
The entity class's SetFocus() function should always call this fuction before it return true. 
				</summary>
				<parameter name="entity"/>
			</function>
			<function line="800" name="GetFocus">
				<summary>function EntityManager.GetFocus()
get current focus
				</summary>
			</function>
			<function line="805" name="FrameMoveDynamicObjects">
				<summary>function EntityManager.FrameMoveDynamicObjects(deltaTime, cur_time, destroy_list)
dynamic object is always framemoved until they are dead. 
				</summary>
				<parameter name="deltaTime"/>
				<parameter name="cur_time"/>
				<parameter name="destroy_list"/>
			</function>
			<function line="822" name="FrameMoveAllActiveChunks">
				<summary>function EntityManager.FrameMoveAllActiveChunks(deltaTime, cur_time, destroy_list)

				</summary>
				<parameter name="deltaTime"/>
				<parameter name="cur_time"/>
				<parameter name="destroy_list"/>
			</function>
			<function line="848" name="MakeChunksNearPlayerActive">
				<summary>function EntityManager.MakeChunksNearPlayerActive(playerEntity, grid_radius)
all entities in the radius of the given player is framemoved.
   @param grid_radius: if nil, default to playerEntity:GetSentientRadius(). 
				</summary>
				<parameter name="playerEntity"/>
				<parameter name="grid_radius">if nil, default to playerEntity:GetSentientRadius(). 
				</parameter>
			</function>
			<function line="861" name="FrameMoveEntities">
				<summary>function EntityManager.FrameMoveEntities(entities, deltaTime, cur_time, destroy_list)
all entities in the list is framemoved. 
				</summary>
				<parameter name="entities"/>
				<parameter name="deltaTime"/>
				<parameter name="cur_time"/>
				<parameter name="destroy_list"/>
			</function>
			<function line="881" name="FrameMoveSentientList">
				<summary>function EntityManager.FrameMoveSentientList(deltaTime, cur_time, destroy_list)
for always sentient objects, like CommandEntity with timed event
   @param deltaTime: in seconds
   @param cur_time: in seconds
				</summary>
				<parameter name="deltaTime">in seconds
				</parameter>
				<parameter name="cur_time">in seconds
				</parameter>
				<parameter name="destroy_list"/>
			</function>
			<function line="904" name="FilterEntity">
				<summary>function EntityManager.FilterEntity(entity, params, entities)
filter entity by params
   @param params: {name, type, nontype, mname, count}
name: only entities with given name.
mname: match regular expression of the given name
type: only entities of given type. 
nontype: only entities not of the given type
r: get entities only less than r blocks from the origin
rm: get entities only more than rm blocks from the origin.
count: return as most this number of objects, usually in order of distance from the origin.
   @param entities: nil or array of comparing entities
   @return entity of nil
				</summary>
				<parameter name="entity"/>
				<parameter name="params">{name, type, nontype, mname, count}
name: only entities with given name.
mname: match regular expression of the given name
type: only entities of given type. 
nontype: only entities not of the given type
r: get entities only less than r blocks from the origin
rm: get entities only more than rm blocks from the origin.
count: return as most this number of objects, usually in order of distance from the origin.
				</parameter>
				<parameter name="entities">nil or array of comparing entities
				</parameter>
				<returns>return of nil
				</returns>
			</function>
			<function line="954" name="FindEntities">
				<summary>function EntityManager.FindEntities(params)
find entities by a number of matching parameters. block entities are always escaped
   @param params: {category, type, nontype, name, x,y,z,dz,dy,dz,r,rm, count}
category: "e" all entities (if nil, it default to "e"),"p" for nearest player, "r" random player, "a" all players
name: only entities with given name.
type: only entities of given type. 
nontype: only entities not of the given type
x,y,z: center of origin to selects entities. 
r: get entities only less than r blocks from the origin
rm: get entities only more than rm blocks from the origin.
dx,dy,dz: this is a cubic volume as defined by extending these blocks from the origin.
count: return as most this number of objects, usually in order of distance from the origin.
   @return nil or array of entities
				</summary>
				<parameter name="params">{category, type, nontype, name, x,y,z,dz,dy,dz,r,rm, count}
category: "e" all entities (if nil, it default to "e"),"p" for nearest player, "r" random player, "a" all players
name: only entities with given name.
type: only entities of given type. 
nontype: only entities not of the given type
x,y,z: center of origin to selects entities. 
r: get entities only less than r blocks from the origin
rm: get entities only more than rm blocks from the origin.
dx,dy,dz: this is a cubic volume as defined by extending these blocks from the origin.
count: return as most this number of objects, usually in order of distance from the origin.
				</parameter>
				<returns>return or array of entities
				</returns>
			</function>
		</table>
		<table name="Entity" src="script/apps/Aries/Creator/Game/Entity/Entity.lua">
			<function line="106" name="ctor">
				<summary>function Entity:ctor()

   @param x,y,z: initial real world position.
   @param radius: the half radius of the object. 
				</summary>
			</function>
			<function line="113" name="SetEntityId">
				<summary>function Entity:SetEntityId(id)
this function can only be called before entity is attached, such as in Init() function. 
e.g. when that server and client need to share same id
				</summary>
				<parameter name="id"/>
			</function>
			<function line="124" name="GetCameraRoll">
				<summary>function Entity:GetCameraRoll()
when entity is focused, this is the additional camera roll applied.
				</summary>
			</function>
			<function line="128" name="SetCameraRoll">
				<summary>function Entity:SetCameraRoll(roll)

				</summary>
				<parameter name="roll"/>
			</function>
			<function line="138" name="event">
				<summary>function Entity:event(event)
all kinds of custom user or game event, that is handled mostly by rule bag items.
Entity event is the only source of inputs to the containing rule bag items, which the user can customize using ItemCommand, ItemScript, etc. 
In the big picture, event forms a dynamic and user configurable network of connections among entities and rule bag items. 
Items in rule bags are executed in sequence, until one of them accept the event. 
Some events are system buildin events that is fired automatically by the system like like mousePressEvent, mouseReleaseEvent, worldLoadedEvent, blockTickEvent, timerEvent, etc. 
Custom events may be sent to any entity via /sendevent command to achieve any user defined world logics. 
				</summary>
				<parameter name="event"/>
			</function>
			<function line="165" name="GetType">
				<summary>function Entity:GetType()
static method
				</summary>
			</function>
			<function line="171" name="IsOfType">
				<summary>function Entity:IsOfType(class_name)
static method: recursively check if entity is derived from a given type.
   @param class_name: if nil, it will always return true. 
				</summary>
				<parameter name="class_name">if nil, it will always return true. 
				</parameter>
			</function>
			<function line="175" name="Reset">
				<summary>function Entity:Reset()

				</summary>
			</function>
			<function line="184" name="IsRemote">
				<summary>function Entity:IsRemote()
return true if the entity is controlled remotely by the server. 
i.e. whether this entity is a client proxy of server entity. 
				</summary>
			</function>
			<function line="190" name="SetLocal">
				<summary>function Entity:SetLocal(bForceLocal)
set whether this entity is a local entity even the game logic is in remote mode.
   @sa self:IsRemote().
				</summary>
				<parameter name="bForceLocal"/>
			</function>
			<function line="195" name="GetEditModel">
				<summary>function Entity:GetEditModel()
created on demand for editors
				</summary>
			</function>
			<function line="207" name="GetInventory">
				<summary>function Entity:GetInventory()
get the inventory object if any
				</summary>
			</function>
			<function line="212" name="GetInventoryView">
				<summary>function Entity:GetInventoryView()
get the inventory view object if any. It will create one if inventory exist but view not exist. 
				</summary>
			</function>
			<function line="222" name="SetPersistent">
				<summary>function Entity:SetPersistent(bIsPersistent)
whether the entity should be serialized to disk. 
				</summary>
				<parameter name="bIsPersistent"/>
			</function>
			<function line="228" name="EnableAnimation">
				<summary>function Entity:EnableAnimation(bEnable)
whether automatically advance local time of current animation id. true by default. 
Maybe set to false during movie actor action playback 
				</summary>
				<parameter name="bEnable"/>
			</function>
			<function line="235" name="IsBiped">
				<summary>function Entity:IsBiped()

				</summary>
			</function>
			<function line="239" name="SetDummy">
				<summary>function Entity:SetDummy(bIsDummy)
whether it will check for collision detection 
				</summary>
				<parameter name="bIsDummy"/>
			</function>
			<function line="244" name="IsDummy">
				<summary>function Entity:IsDummy()
whether it will check for collision detection 
				</summary>
			</function>
			<function line="250" name="FaceTarget">
				<summary>function Entity:FaceTarget(x,y,z)

				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="253" name="ToggleFly">
				<summary>function Entity:ToggleFly(bFly)

				</summary>
				<parameter name="bFly"/>
			</function>
			<function line="257" name="SetWorld">
				<summary>function Entity:SetWorld(world)
Sets the reference to the World object.
				</summary>
				<parameter name="world"/>
			</function>
			<function line="262" name="LoadFromXMLNode">
				<summary>function Entity:LoadFromXMLNode(node)
load from an xml node. 
				</summary>
				<parameter name="node"/>
			</function>
			<function line="330" name="GetVariables">
				<summary>function Entity:GetVariables()
get the variables object for custom user values. 
				</summary>
			</function>
			<function line="337" name="SaveToXMLNode">
				<summary>function Entity:SaveToXMLNode(node, bSort)

				</summary>
				<parameter name="node"/>
				<parameter name="bSort"/>
			</function>
			<function line="383" name="SetFocus">
				<summary>function Entity:SetFocus()
let the camera focus on this player and take control of it.
   @note: please note if this return nil, and does not call EntityManager.SetFocus(), OnFocusIn and OnFocusOut will never be called
   @return return true if focus can be set
				</summary>
				<returns>return true if focus can be set
				</returns>
			</function>
			<function line="386" name="HasFocus">
				<summary>function Entity:HasFocus()

				</summary>
			</function>
			<function line="391" name="OnFocusIn">
				<summary>function Entity:OnFocusIn()
called after focus is set
				</summary>
			</function>
			<function line="405" name="SetSkipPicking">
				<summary>function Entity:SetSkipPicking(bSkipPicking)

				</summary>
				<parameter name="bSkipPicking"/>
			</function>
			<function line="413" name="OnFocusOut">
				<summary>function Entity:OnFocusOut()
called before focus is lost
				</summary>
			</function>
			<function line="424" name="SetVisible">
				<summary>function Entity:SetVisible(bVisible)

				</summary>
				<parameter name="bVisible"/>
			</function>
			<function line="432" name="IsVisible">
				<summary>function Entity:IsVisible()

				</summary>
			</function>
			<function line="436" name="IsFlying">
				<summary>function Entity:IsFlying()

				</summary>
			</function>
			<function line="439" name="IsRunning">
				<summary>function Entity:IsRunning()

				</summary>
			</function>
			<function line="442" name="ToggleRunning">
				<summary>function Entity:ToggleRunning()

				</summary>
			</function>
			<function line="445" name="GetSpeedScale">
				<summary>function Entity:GetSpeedScale()

				</summary>
			</function>
			<function line="450" name="GetCurrentSpeedScale">
				<summary>function Entity:GetCurrentSpeedScale()
take running and flying into account. 
				</summary>
			</function>
			<function line="465" name="GetWalkSpeed">
				<summary>function Entity:GetWalkSpeed()

				</summary>
			</function>
			<function line="469" name="SetWalkSpeed">
				<summary>function Entity:SetWalkSpeed(speed)

				</summary>
				<parameter name="speed"/>
			</function>
			<function line="473" name="SetSpeedScale">
				<summary>function Entity:SetSpeedScale(value)

				</summary>
				<parameter name="value"/>
			</function>
			<function line="477" name="GetJumpupSpeed">
				<summary>function Entity:GetJumpupSpeed()

				</summary>
			</function>
			<function line="481" name="CanReachBlockAt">
				<summary>function Entity:CanReachBlockAt(x,y,z, mode)

				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="mode"/>
			</function>
			<function line="486" name="CanTeleport">
				<summary>function Entity:CanTeleport()
whether the entity can be teleported to another place, by teleport stone for instance. 
				</summary>
			</function>
			<function line="493" name="ToggleWalkRun">
				<summary>function Entity:ToggleWalkRun(bWalking)
usually holding shift key will toggle to walk mode.
   @param bWalking: if nil it will toggle. if true, it will force walk or run. 
				</summary>
				<parameter name="bWalking">if nil it will toggle. if true, it will force walk or run. 
				</parameter>
			</function>
			<function line="508" name="EnableLOD">
				<summary>function Entity:EnableLOD(bEnable)
enable internel mesh level of details if any. 
				</summary>
				<parameter name="bEnable"/>
			</function>
			<function line="515" name="IsLODEnabled">
				<summary>function Entity:IsLODEnabled()

				</summary>
			</function>
			<function line="524" name="IsWalking">
				<summary>function Entity:IsWalking()
all entity default to running (not walking). 
				</summary>
			</function>
			<function line="537" name="SetAnimation">
				<summary>function Entity:SetAnimation(filenames)
build animation sequence table to be fed to entity.
   @param filenames: can be filename, animation name, animation id or array of above things. currently only two animation is supported. 
such as {4,0} 
				</summary>
				<parameter name="filenames">can be filename, animation name, animation id or array of above things. currently only two animation is supported. 
such as {4,0} 
				</parameter>
			</function>
			<function line="571" name="GetLastAnimId">
				<summary>function Entity:GetLastAnimId()
get last animation id. this may return nil, which usually mean 0.
				</summary>
			</function>
			<function line="577" name="ShowHeadOnDisplay">
				<summary>function Entity:ShowHeadOnDisplay(bShow)
enable headon display
				</summary>
				<parameter name="bShow"/>
			</function>
			<function line="580" name="IsShowHeadOnDisplay">
				<summary>function Entity:IsShowHeadOnDisplay()

				</summary>
			</function>
			<function line="584" name="AddStat">
				<summary>function Entity:AddStat(id, delta_count)
add stat
				</summary>
				<parameter name="id"/>
				<parameter name="delta_count"/>
			</function>
			<function line="588" name="GetPortaitObjectParams">
				<summary>function Entity:GetPortaitObjectParams(bForceRefresh)
add stat
get object params table to create the portait in entity dialog.
   @param bForceRefresh: if true, it will fetch again from innerObject. 
				</summary>
				<parameter name="bForceRefresh">if true, it will fetch again from innerObject. 
				</parameter>
			</function>
			<function line="620" name="CreateInnerObject">
				<summary>function Entity:CreateInnerObject(filename, isCharacter, offsetY, scaling)
this is helper function that derived class can use to create an inner mesh or character object. 
				</summary>
				<parameter name="filename"/>
				<parameter name="isCharacter"/>
				<parameter name="offsetY"/>
				<parameter name="scaling"/>
			</function>
			<function line="651" name="DestroyInnerObject">
				<summary>function Entity:DestroyInnerObject()
this is helper function that derived class can use to destroy an inner mesh or character object. 
				</summary>
			</function>
			<function line="661" name="OnShiftKeyPressed">
				<summary>function Entity:OnShiftKeyPressed()
this is called on each tick, when this entity has focus and user is pressing and holding shift key. 
				</summary>
			</function>
			<function line="665" name="OnShiftKeyReleased">
				<summary>function Entity:OnShiftKeyReleased()
this is called, when this entity has focus and user is just released the shift key. 
				</summary>
			</function>
			<function line="668" name="Jump">
				<summary>function Entity:Jump()

				</summary>
			</function>
			<function line="684" name="SetGravity">
				<summary>function Entity:SetGravity(value)

   @param value: if nil, it will use the global gravity. 
				</summary>
				<parameter name="value">if nil, it will use the global gravity. 
				</parameter>
			</function>
			<function line="688" name="GetGravity">
				<summary>function Entity:GetGravity()

				</summary>
			</function>
			<function line="693" name="GetDataContainer">
				<summary>function Entity:GetDataContainer()
get data container. 
				</summary>
			</function>
			<function line="703" name="IsPersistent">
				<summary>function Entity:IsPersistent()
whether its persistent. 
				</summary>
			</function>
			<function line="709" name="OnActivated">
				<summary>function Entity:OnActivated(triggerEntity)
virtual function: handle some external input. 
default is do nothing. return true is something is processed. 
				</summary>
				<parameter name="triggerEntity"/>
			</function>
			<function line="717" name="IsRegional">
				<summary>function Entity:IsRegional()
if true, always serialize to 512*512 regional entity file
block based entity has this set to true. 
				</summary>
			</function>
			<function line="722" name="init">
				<summary>function Entity:init()
virtual function: 
				</summary>
			</function>
			<function line="727" name="OnCollideWithPlayer">
				<summary>function Entity:OnCollideWithPlayer(from_entity, bx,by,bz)
player entity collided with this entity
				</summary>
				<parameter name="from_entity"/>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
			</function>
			<function line="731" name="OnHit">
				<summary>function Entity:OnHit(attack_value, fromX, fromY, fromZ)
virtual function: when the entity is hit (attacked) by the missile
				</summary>
				<parameter name="attack_value"/>
				<parameter name="fromX"/>
				<parameter name="fromY"/>
				<parameter name="fromZ"/>
			</function>
			<function line="735" name="OnClick">
				<summary>function Entity:OnClick(x,y,z, mouse_button,entity,side)
virtual function:
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="mouse_button"/>
				<parameter name="entity"/>
				<parameter name="side"/>
			</function>
			<function line="738" name="GetBlockId">
				<summary>function Entity:GetBlockId()

				</summary>
			</function>
			<function line="743" name="GetCommandTable">
				<summary>function Entity:GetCommandTable()
return a table array containing all commands or comments. 
				</summary>
			</function>
			<function line="756" name="SetCommandTable">
				<summary>function Entity:SetCommandTable(commands)
set command table
				</summary>
				<parameter name="commands"/>
			</function>
			<function line="766" name="GetCommandList">
				<summary>function Entity:GetCommandList()
get latest command list. comments is empty line
it will cache last parsed result
				</summary>
			</function>
			<function line="779" name="HasCommand">
				<summary>function Entity:HasCommand()
bool: whether has command panel
				</summary>
			</function>
			<function line="784" name="GetCommandTitle">
				<summary>function Entity:GetCommandTitle()
the title text to display (can be mcml)
				</summary>
			</function>
			<function line="788" name="HasRule">
				<summary>function Entity:HasRule()
bool: whether show the rule panel
				</summary>
			</function>
			<function line="793" name="GetRuleTitle">
				<summary>function Entity:GetRuleTitle()
the title text to display (can be mcml)
				</summary>
			</function>
			<function line="798" name="ActivateCommands">
				<summary>function Entity:ActivateCommands(triggerEntity)
This function is called manually. Such as during OnActivated().
   @param triggerEntity: this is the triggering player or sometimes the entity itself if /activate self is used. 
				</summary>
				<parameter name="triggerEntity">this is the triggering player or sometimes the entity itself if /activate self is used. 
				</parameter>
			</function>
			<function line="818" name="ActivateRules">
				<summary>function Entity:ActivateRules(triggerEntity)
this function is called automatically when this entity is activated. 
override this function to change behavior.
build, reload and activate all rules in the self.rulebag
				</summary>
				<parameter name="triggerEntity"/>
			</function>
			<function line="835" name="HasBag">
				<summary>function Entity:HasBag()
bool: whether show the bag panel
				</summary>
			</function>
			<function line="840" name="GetBagTitle">
				<summary>function Entity:GetBagTitle()
the title text to display (can be mcml)
				</summary>
			</function>
			<function line="845" name="SetDisplayName">
				<summary>function Entity:SetDisplayName(v)
virtual function:
				</summary>
				<parameter name="v"/>
			</function>
			<function line="849" name="GetDisplayName">
				<summary>function Entity:GetDisplayName()

				</summary>
			</function>
			<function line="854" name="SetName">
				<summary>function Entity:SetName(v)
internal name 
				</summary>
				<parameter name="v"/>
			</function>
			<function line="862" name="GetName">
				<summary>function Entity:GetName()

				</summary>
			</function>
			<function line="867" name="SetCommand">
				<summary>function Entity:SetCommand(cmd)
virtual function:
				</summary>
				<parameter name="cmd"/>
			</function>
			<function line="871" name="GetCommand">
				<summary>function Entity:GetCommand()

				</summary>
			</function>
			<function line="876" name="Refresh">
				<summary>function Entity:Refresh()
virtual function
				</summary>
			</function>
			<function line="880" name="CreateFromPool">
				<summary>function Entity:CreateFromPool()
static function: in the Destroy function, the entity are recollected
				</summary>
			</function>
			<function line="886" name="Create">
				<summary>function Entity:Create(o, xml_node)
factory class to create an instance of the entity 
				</summary>
				<parameter name="o"/>
				<parameter name="xml_node"/>
			</function>
			<function line="894" name="SetInnerObject">
				<summary>function Entity:SetInnerObject(obj)

				</summary>
				<parameter name="obj"/>
			</function>
			<function line="905" name="GetInnerObject">
				<summary>function Entity:GetInnerObject()
get the ParaObject from self.obj_id. 
performace optimized: since we will cache obj in self.obj on first call. 
and use ParaScene.CheckExist to check validity on subsequent calls, which is LuaJit optimized. 
thus calling this function each frame is fine. 
				</summary>
			</function>
			<function line="921" name="GetObjID">
				<summary>function Entity:GetObjID()

				</summary>
			</function>
			<function line="931" name="SetObjID">
				<summary>function Entity:SetObjID(id)
obsoleted, use SetInnerObject instead
				</summary>
				<parameter name="id"/>
			</function>
			<function line="937" name="GetOpacity">
				<summary>function Entity:GetOpacity()

				</summary>
			</function>
			<function line="941" name="SetOpacity">
				<summary>function Entity:SetOpacity(value)

				</summary>
				<parameter name="value"/>
			</function>
			<function line="946" name="GetItemClass">
				<summary>function Entity:GetItemClass()
get the associated item class. 
				</summary>
			</function>
			<function line="953" name="GetBlock">
				<summary>function Entity:GetBlock()
get the associated block template class. 
				</summary>
			</function>
			<function line="963" name="SetDead">
				<summary>function Entity:SetDead()
set as dead and will be destroyed in the next framemove.
				</summary>
			</function>
			<function line="967" name="IsDead">
				<summary>function Entity:IsDead()

				</summary>
			</function>
			<function line="971" name="Destroy">
				<summary>function Entity:Destroy()

				</summary>
			</function>
			<function line="983" name="Detach">
				<summary>function Entity:Detach()
detach from entity manager
				</summary>
			</function>
			<function line="1000" name="OnRemoved">
				<summary>function Entity:OnRemoved()
virtual, called when this entity is removed from EntityManager, either detached or during world exit.
this function is also called when entity is destroyed if it is attached to EntityManager.
				</summary>
			</function>
			<function line="1003" name="GetWorldServer">
				<summary>function Entity:GetWorldServer()

				</summary>
			</function>
			<function line="1012" name="Say">
				<summary>function Entity:Say(text, duration, bAbove3D)
let the entity say something on top of its head for some seconds.
   @param text: text to show
   @param duration: in seconds. default to 4
   @param bAbove3D: default to nil, if true, headon UI will be displayed above all 3D objects. if false or nil, it just renders the UI with z buffer test enabled. 
return true if we actually said something, otherwise nil.
				</summary>
				<parameter name="text">text to show
				</parameter>
				<parameter name="duration">in seconds. default to 4
				</parameter>
				<parameter name="bAbove3D">default to nil, if true, headon UI will be displayed above all 3D objects. if false or nil, it just renders the UI with z buffer test enabled. 
return true if we actually said something, otherwise nil.
				</parameter>
			</function>
			<function line="1032" name="Attach">
				<summary>function Entity:Attach()
attach to entity manager
				</summary>
			</function>
			<function line="1042" name="canPlaceBlockAt">
				<summary>function Entity:canPlaceBlockAt(x,y,z, block)
virtual function: whether we can place a block where this entity stands in. 
in most cases, this is false, unless the entity is wise enough to move around to other free spaces. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="block"/>
			</function>
			<function line="1047" name="OnBlockEvent">
				<summary>function Entity:OnBlockEvent(x,y,z, event_id, event_param)
when ever an event is received. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="event_id"/>
				<parameter name="event_param"/>
			</function>
			<function line="1051" name="SetScaling">
				<summary>function Entity:SetScaling(v)
virtual function:
				</summary>
				<parameter name="v"/>
			</function>
			<function line="1059" name="GetScaling">
				<summary>function Entity:GetScaling()

				</summary>
			</function>
			<function line="1068" name="SetScalingDelta">
				<summary>function Entity:SetScalingDelta(v)
virtual function:
				</summary>
				<parameter name="v"/>
			</function>
			<function line="1073" name="SetFacingDelta">
				<summary>function Entity:SetFacingDelta(v)
virtual function:
				</summary>
				<parameter name="v"/>
			</function>
			<function line="1077" name="SetFacing">
				<summary>function Entity:SetFacing(facing)	
set facing of the lower object. 
				</summary>
				<parameter name="facing"/>
			</function>
			<function line="1085" name="GetFacing">
				<summary>function Entity:GetFacing()	

				</summary>
			</function>
			<function line="1089" name="SetHighlight">
				<summary>function Entity:SetHighlight(bHighlight)

				</summary>
				<parameter name="bHighlight"/>
			</function>
			<function line="1099" name="PlaySound">
				<summary>function Entity:PlaySound(sound_name)

				</summary>
				<parameter name="sound_name"/>
			</function>
			<function line="1102" name="IsServerEntity">
				<summary>function Entity:IsServerEntity()

				</summary>
			</function>
			<function line="1107" name="OpenEditor">
				<summary>function Entity:OpenEditor(editor_name, entity)
virtual function: right click to edit. 
				</summary>
				<parameter name="editor_name"/>
				<parameter name="entity"/>
			</function>
			<function line="1124" name="UpdateBlockContainer">
				<summary>function Entity:UpdateBlockContainer()

				</summary>
			</function>
			<function line="1151" name="GetBlockPos">
				<summary>function Entity:GetBlockPos()

   @return bx, by, bz in block world. 
				</summary>
				<returns>return , by, bz in block world. 
				</returns>
			</function>
			<function line="1158" name="doesEntityTriggerPressurePlate">
				<summary>function Entity:doesEntityTriggerPressurePlate()

				</summary>
			</function>
			<function line="1163" name="SetBlockPos">
				<summary>function Entity:SetBlockPos(bx, by, bz)
update block position according to the associated object. 
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
			</function>
			<function line="1184" name="GetDistanceSq">
				<summary>function Entity:GetDistanceSq(x,y,z)

   @sa DistanceSqTo() for block pos
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1191" name="SetLocationAndAngles">
				<summary>function Entity:SetLocationAndAngles(x,y,z, yaw, pitch)
Sets the location and Yaw/Pitch of an entity in the world. It will teleport the player at the exact location.
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="yaw"/>
				<parameter name="pitch"/>
			</function>
			<function line="1201" name="TeleportToBlockPos">
				<summary>function Entity:TeleportToBlockPos(x,y,z)
teleport to a given block position. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1206" name="SetPositionAndRotation">
				<summary>function Entity:SetPositionAndRotation(x,y,z,yaw, pitch)
Sets the entity's position and rotation. But it does not change last tick position. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="yaw"/>
				<parameter name="pitch"/>
			</function>
			<function line="1211" name="SetRotation">
				<summary>function Entity:SetRotation(facing, pitch)

				</summary>
				<parameter name="facing"/>
				<parameter name="pitch"/>
			</function>
			<function line="1218" name="SetRoll">
				<summary>function Entity:SetRoll(roll)
rotation around Z axis
				</summary>
				<parameter name="roll"/>
			</function>
			<function line="1226" name="GetRoll">
				<summary>function Entity:GetRoll(roll)
rotation around Z axis
				</summary>
				<parameter name="roll"/>
			</function>
			<function line="1232" name="SetPitch">
				<summary>function Entity:SetPitch(pitch)
rotation around X axis
				</summary>
				<parameter name="pitch"/>
			</function>
			<function line="1240" name="GetPitch">
				<summary>function Entity:GetPitch()
rotation around X axis
				</summary>
			</function>
			<function line="1247" name="SetPositionAndRotation2">
				<summary>function Entity:SetPositionAndRotation2(x,y,z,yaw, pitch, posRotIncrements)
Sets the entity's position and rotation. it will correct y so it will snap to ground.
   @param posRotIncrements: smoothed frames. we will move to x,y,z in this number of ticks. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="yaw"/>
				<parameter name="pitch"/>
				<parameter name="posRotIncrements">smoothed frames. we will move to x,y,z in this number of ticks. 
				</parameter>
			</function>
			<function line="1254" name="SetPosition">
				<summary>function Entity:SetPosition(x, y, z)
set real world position for the object. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1277" name="getPosition">
				<summary>function Entity:getPosition()

   @return a clone of {x,y,z}
				</summary>
				<returns>return clone of {x,y,z}
				</returns>
			</function>
			<function line="1282" name="setPosition">
				<summary>function Entity:setPosition(pos)

   @param pos: {x,y,z}
				</summary>
				<parameter name="pos">{x,y,z}
				</parameter>
			</function>
			<function line="1290" name="GetPosition">
				<summary>function Entity:GetPosition()
virtual function: Get real world position. if not exist, we will convert from block position. 
				</summary>
			</function>
			<function line="1303" name="GetNextPosition">
				<summary>function Entity:GetNextPosition(deltaTime)
get next position using its current speed with deltaTime
				</summary>
				<parameter name="deltaTime"/>
			</function>
			<function line="1316" name="DistanceSqTo">
				<summary>function Entity:DistanceSqTo(x,y,z)
get block world distance to the give block position.
   @sa GetDistanceSq() for real pos
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1322" name="GetPickingDist">
				<summary>function Entity:GetPickingDist()
get the picking distance of this entity. 
				</summary>
			</function>
			<function line="1327" name="UpdateRotation">
				<summary>function Entity:UpdateRotation()
virtual function: only used by EntityPlayer to update Yaw,pitch from player controlled object. 
				</summary>
			</function>
			<function line="1334" name="UpdatePosition">
				<summary>function Entity:UpdatePosition(x,y,z)
virtual function: only used by EntityPlayer to update block position from player controlled object. 
do not call this if object is controlled completely from scripting interface.
   @param x,y,z: if nil, we will use the inner object's real position(NOT block position)
   @return inner object if x, y, z is not specified. 
				</summary>
				<parameter name="x">,y,z: if nil, we will use the inner object's real position(NOT block position)
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
				<returns>return object if x, y, z is not specified. 
				</returns>
			</function>
			<function line="1363" name="ApplyEntityCollision">
				<summary>function Entity:ApplyEntityCollision(fromEntity, deltaTime)
Applies a velocity to each of the entities pushing them away from each other. 
				</summary>
				<parameter name="fromEntity"/>
				<parameter name="deltaTime"/>
			</function>
			<function line="1396" name="CanPushBlock">
				<summary>function Entity:CanPushBlock()
whether this entity can push block
				</summary>
			</function>
			<function line="1401" name="CanBePushedBy">
				<summary>function Entity:CanBePushedBy(fromEntity)
Returns true if this entity should push and be pushed by other entities when colliding.
				</summary>
				<parameter name="fromEntity"/>
			</function>
			<function line="1406" name="CanBeCollidedWith">
				<summary>function Entity:CanBeCollidedWith()
Returns true if other Entities should be prevented from moving through this Entity.
				</summary>
			</function>
			<function line="1411" name="CanBeMounted">
				<summary>function Entity:CanBeMounted()
return true if this entity can be ridden by a player. 
				</summary>
			</function>
			<function line="1416" name="CollideWithEntity">
				<summary>function Entity:CollideWithEntity(fromEntity)
this function is called when this entity collide with another entity. 
				</summary>
				<parameter name="fromEntity"/>
			</function>
			<function line="1419" name="GetPhysicsRadius">
				<summary>function Entity:GetPhysicsRadius()

				</summary>
			</function>
			<function line="1423" name="SetPhysicsRadius">
				<summary>function Entity:SetPhysicsRadius(radius)

				</summary>
				<parameter name="radius"/>
			</function>
			<function line="1434" name="GetPhysicsHeight">
				<summary>function Entity:GetPhysicsHeight()

				</summary>
			</function>
			<function line="1438" name="SetPhysicsHeight">
				<summary>function Entity:SetPhysicsHeight(height)

				</summary>
				<parameter name="height"/>
			</function>
			<function line="1449" name="IsPlayer">
				<summary>function Entity:IsPlayer()

				</summary>
			</function>
			<function line="1454" name="GetCollisionAABB">
				<summary>function Entity:GetCollisionAABB()
in real world coordinates
				</summary>
			</function>
			<function line="1471" name="CheckGetCollisionBox">
				<summary>function Entity:CheckGetCollisionBox(entity)
returns a boundingBox used to collide the entity with other entities and blocks. 
This enables the entity to be pushable on contact
   @param entity: the entity to check against
				</summary>
				<parameter name="entity">the entity to check against
				</parameter>
			</function>
			<function line="1477" name="PushOutOfBlocks">
				<summary>function Entity:PushOutOfBlocks(x,y,z)
Adds velocity to push the entity out of blocks at the specified x, y, z position
   @return true if successfully pushed
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<returns>return if successfully pushed
				</returns>
			</function>
			<function line="1513" name="SetCheckCollision">
				<summary>function Entity:SetCheckCollision(bCheck)
default to true. 
				</summary>
				<parameter name="bCheck"/>
			</function>
			<function line="1518" name="IsCheckCollision">
				<summary>function Entity:IsCheckCollision()
whether we will check collision for this entity
				</summary>
			</function>
			<function line="1524" name="CheckCollision">
				<summary>function Entity:CheckCollision(deltaTime)
virtual function: check if the entity collide with other entity or block. if so, we will fire event and adjust position.
				</summary>
				<parameter name="deltaTime"/>
			</function>
			<function line="1571" name="CanMoveTo">
				<summary>function Entity:CanMoveTo(x,y,z)
whether the entity can move to the given side relative to its current location. 
it will automatically climb over one block height unless it is a fence
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1594" name="GetItemId">
				<summary>function Entity:GetItemId()

				</summary>
			</function>
			<function line="1598" name="GetItemClass">
				<summary>function Entity:GetItemClass()

				</summary>
			</function>
			<function line="1605" name="FallDown">
				<summary>function Entity:FallDown(deltaTime)
falls down immediately one block if not obstruction below. 
				</summary>
				<parameter name="deltaTime"/>
			</function>
			<function line="1630" name="GetLifeTime">
				<summary>function Entity:GetLifeTime()
get the number of seconds left before the entity is dead. 
if return nil, the object has infinite life span. 
				</summary>
			</function>
			<function line="1636" name="SetLifeTime">
				<summary>function Entity:SetLifeTime(lifetime)
set the number of seconds left before the entity is dead. 
if return nil, the object has infinite life span. 
				</summary>
				<parameter name="lifetime"/>
			</function>
			<function line="1641" name="CreatePhysicsObject">
				<summary>function Entity:CreatePhysicsObject()
virtual function: overwrite to customize physical object
				</summary>
			</function>
			<function line="1646" name="GetPhysicsObject">
				<summary>function Entity:GetPhysicsObject()
create get physics object. 
				</summary>
			</function>
			<function line="1658" name="HasSpeed">
				<summary>function Entity:HasSpeed()
whether has speed
				</summary>
			</function>
			<function line="1662" name="HasMotion">
				<summary>function Entity:HasMotion()

				</summary>
			</function>
			<function line="1666" name="IsOnGround">
				<summary>function Entity:IsOnGround()

				</summary>
			</function>
			<function line="1678" name="IsTick">
				<summary>function Entity:IsTick(func_name, deltaTime, intervalSeconds)
check to see if we should tick. For example, some function may be called with deltaTime in 30fps, 
however, we only want to process at 20FPS, such as physics, we can use this function is easily limit function calling rate.
   @param func_name: default to "FrameMove". this can be any string.
   @param deltaTime: delta time in seconds, since last call
   @param intervalSeconds: default to 1/20
				</summary>
				<parameter name="func_name">default to "FrameMove". this can be any string.
				</parameter>
				<parameter name="deltaTime">delta time in seconds, since last call
				</parameter>
				<parameter name="intervalSeconds">default to 1/20
				</parameter>
			</function>
			<function line="1688" name="AddVelocity">
				<summary>function Entity:AddVelocity(x,y,z)
Adds to the current velocity of the entity.
   @param x,y,z: velocity in x,y,z direction. 
				</summary>
				<parameter name="x">,y,z: velocity in x,y,z direction. 
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1698" name="SetVelocity">
				<summary>function Entity:SetVelocity(x,y,z)
Set current velocity of the entity.
   @param x,y,z: velocity in x,y,z direction. all may be nil to retain last speed. 
				</summary>
				<parameter name="x">,y,z: velocity in x,y,z direction. all may be nil to retain last speed. 
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1717" name="AddMotion">
				<summary>function Entity:AddMotion(dx,dy,dz)
Adds to the current motion of the entity.
   @param x,y,z: velocity in x,y,z direction. 
				</summary>
				<parameter name="dx"/>
				<parameter name="dy"/>
				<parameter name="dz"/>
			</function>
			<function line="1728" name="GetVelocity">
				<summary>function Entity:GetVelocity()
return x,y,z
				</summary>
			</function>
			<function line="1738" name="MoveEntity">
				<summary>function Entity:MoveEntity(deltaTime, bTryMove)
derived class can call this function to move the entity using its current speed.
   @param bTryMove: if true, we will always try move the entity even it does not have speed. 
				</summary>
				<parameter name="deltaTime"/>
				<parameter name="bTryMove">if true, we will always try move the entity even it does not have speed. 
				</parameter>
			</function>
			<function line="1753" name="SetFrameMoveInterval">
				<summary>function Entity:SetFrameMoveInterval(framemove_interval)
set frame move interval
				</summary>
				<parameter name="framemove_interval"/>
			</function>
			<function line="1763" name="IsBlockEntity">
				<summary>function Entity:IsBlockEntity()

				</summary>
			</function>
			<function line="1768" name="GetDescriptionPacket">
				<summary>function Entity:GetDescriptionPacket()
Overriden in a sign to provide the text.
				</summary>
			</function>
			<function line="1772" name="OnUpdateFromPacket">
				<summary>function Entity:OnUpdateFromPacket(packet_UpdateEntitySign)

				</summary>
				<parameter name="packet_UpdateEntitySign"/>
			</function>
			<function line="1776" name="SetTickRate">
				<summary>function Entity:SetTickRate(tickRate)
how many framemove per seconds
				</summary>
				<parameter name="tickRate"/>
			</function>
			<function line="1782" name="SetAlwaysSentient">
				<summary>function Entity:SetAlwaysSentient(bSentient)
this will cause this entity to become always sentent. 
				</summary>
				<parameter name="bSentient"/>
			</function>
			<function line="1793" name="IsAlwaysSentient">
				<summary>function Entity:IsAlwaysSentient()

				</summary>
			</function>
			<function line="1798" name="GetTickRateInterval">
				<summary>function Entity:GetTickRateInterval()
1/tickRate
				</summary>
			</function>
			<function line="1807" name="CheckFrameMove">
				<summary>function Entity:CheckFrameMove(deltaTime, curTime, bForceFrameMove)
return true if EntityMob.framemove_interval is not nil and ready to frame move.
   @param deltaTime in seconds
   @param bForceFrameMove: if nil we will only check but does not do the framemove. If true, we will not check but do the framemove
true to run the framemove and increase the local time.
   @return nil or deltaTimeReal in seconds.
				</summary>
				<parameter name="deltaTime">in seconds
				</parameter>
				<parameter name="curTime"/>
				<parameter name="bForceFrameMove">if nil we will only check but does not do the framemove. If true, we will not check but do the framemove
true to run the framemove and increase the local time.
				</parameter>
				<returns>return or deltaTimeReal in seconds.
				</returns>
			</function>
			<function line="1844" name="GetTimeEvent">
				<summary>function Entity:GetTimeEvent()
continue;
time event list
				</summary>
			</function>
			<function line="1853" name="AddTimeEvent">
				<summary>function Entity:AddTimeEvent(scheduledTime, name, callbackFunc)
add a timed event to this entity
   @param callbackFunc: function(entity, timedEvent)
				</summary>
				<parameter name="scheduledTime"/>
				<parameter name="name"/>
				<parameter name="callbackFunc">function(entity, timedEvent)
				</parameter>
			</function>
			<function line="1886" name="GetSentientRadius">
				<summary>function Entity:GetSentientRadius()
radius (in blocks) that this entity will awake nearby entities. 
please note, it will only awake other entity if the distance between the two entities is the smaller 
than the smallest value of either entity's GetSentientChunkRadius().
   @return default value is 128
				</summary>
				<returns>return value is 128
				</returns>
			</function>
			<function line="1893" name="AdvanceTime">
				<summary>function Entity:AdvanceTime(delta_time)
advance time and fire all timed event that is smaller than current time. 
return true if there is still time event left.
   @param delta_time: if nil we will advance to next time event. In seconds
				</summary>
				<parameter name="delta_time">if nil we will advance to next time event. In seconds
				</parameter>
			</function>
			<function line="1929" name="IsInputDisabled">
				<summary>function Entity:IsInputDisabled()
whether the entity can receive activation or user input. 
				</summary>
			</function>
			<function line="1935" name="DisableInput">
				<summary>function Entity:DisableInput(bDisabled)
make the entity dummy, it will not respond to any activate command or user input, 
unless it is set to not dummy by command line. /disableinput false
				</summary>
				<parameter name="bDisabled"/>
			</function>
			<function line="1940" name="Pause">
				<summary>function Entity:Pause()
pause any scheduled time event 
				</summary>
			</function>
			<function line="1944" name="IsPaused">
				<summary>function Entity:IsPaused()

				</summary>
			</function>
			<function line="1948" name="Resume">
				<summary>function Entity:Resume()

				</summary>
			</function>
			<function line="1954" name="ClearTimeEvent">
				<summary>function Entity:ClearTimeEvent()
clear all time events in this entity
				</summary>
			</function>
			<function line="1964" name="SetTime">
				<summary>function Entity:SetTime(time)
set local time of this entity. this is only used in animated entity or entity with timed event. 
in seconds. 
				</summary>
				<parameter name="time"/>
			</function>
			<function line="1969" name="GetTime">
				<summary>function Entity:GetTime()
get local time of this entity. in seconds 
				</summary>
			</function>
			<function line="1974" name="SetTimeToNextEvent">
				<summary>function Entity:SetTimeToNextEvent()
set local time of this entity to the next time event in the queue.
				</summary>
			</function>
			<function line="1990" name="SetCharacterSlot">
				<summary>function Entity:SetCharacterSlot(slot_id, item_id)
set the character slot
				</summary>
				<parameter name="slot_id"/>
				<parameter name="item_id"/>
			</function>
			<function line="1998" name="IsControlledExternally">
				<summary>function Entity:IsControlledExternally()

				</summary>
			</function>
			<function line="2005" name="SetControlledExternally">
				<summary>function Entity:SetControlledExternally(bEnable)

				</summary>
				<parameter name="bEnable"/>
			</function>
			<function line="2012" name="GetMainAssetPath">
				<summary>function Entity:GetMainAssetPath()

				</summary>
			</function>
			<function line="2026" name="SetMainAssetPath">
				<summary>function Entity:SetMainAssetPath(name)
set main model
				</summary>
				<parameter name="name"/>
			</function>
			<function line="2033" name="GetBoundRadius">
				<summary>function Entity:GetBoundRadius()

				</summary>
			</function>
			<function line="2043" name="SetSurfaceDecay">
				<summary>function Entity:SetSurfaceDecay(surface_decay)
set speed decay. percentage of motion lost per tick.
   @param surface_decay:  [0,1]. 0 means no speed lost, 1 will lost all speed.  default to 0.5
				</summary>
				<parameter name="surface_decay">[0,1]. 0 means no speed lost, 1 will lost all speed.  default to 0.5
				</parameter>
			</function>
			<function line="2047" name="GetSurfaceDecay">
				<summary>function Entity:GetSurfaceDecay()

				</summary>
			</function>
			<function line="2053" name="BeginEdit">
				<summary>function Entity:BeginEdit()
called when ever an editor like EditEntityPage is opened for this entity
if one wants to provide some basic undo/redo function, this is the place to go.
				</summary>
			</function>
			<function line="2061" name="EndEdit">
				<summary>function Entity:EndEdit()
called when ever an editor like EditEntityPage is closed for this entity
if one wants to provide some basic undo/redo function, this is the place to go.
one may also refresh the entity if any changes take place that is not updated automatically. 
				</summary>
			</function>
			<function line="2068" name="MarkForUpdate">
				<summary>function Entity:MarkForUpdate()
mark for update so that local changes are sent to client or server
				</summary>
			</function>
			<function line="2076" name="PickItem">
				<summary>function Entity:PickItem(itemStack, fromBlockX, fromBlockY, fromBlockZ)
pick the given item.
   @param fromBlockX, fromBlockY, fromBlockZ: block position from the item come from. can all be nil. 
				</summary>
				<parameter name="itemStack"/>
				<parameter name="fromBlockX">, fromBlockY, fromBlockZ: block position from the item come from. can all be nil. 
				</parameter>
				<parameter name="fromBlockY"/>
				<parameter name="fromBlockZ"/>
			</function>
			<function line="2096" name="SetRuleBagSize">
				<summary>function Entity:SetRuleBagSize(size)
create the rule bag if not exist.
   @param size: if nil or 0, it will destory the rule bag. otherwise it will resize the rule bag
				</summary>
				<parameter name="size">if nil or 0, it will destory the rule bag. otherwise it will resize the rule bag
				</parameter>
			</function>
			<function line="2108" name="FrameMoveRules">
				<summary>function Entity:FrameMoveRules(deltaTime)
virtual function: load rules and framemove rule items. 
				</summary>
				<parameter name="deltaTime"/>
			</function>
			<function line="2120" name="FrameMove">
				<summary>function Entity:FrameMove(deltaTime)
virtual function: called every frame
				</summary>
				<parameter name="deltaTime"/>
			</function>
			<function line="2134" name="NotifyBlockCollisions">
				<summary>function Entity:NotifyBlockCollisions()

				</summary>
			</function>
			<function line="2167" name="OnFallDown">
				<summary>function Entity:OnFallDown(distFallen)
virtual: Called when the entity has just fallen to ground. Calculates and applies fall damage.
   @param distFallen: distance fallen. 
				</summary>
				<parameter name="distFallen">distance fallen. 
				</parameter>
			</function>
			<function line="2174" name="IsEntityInvulnerable">
				<summary>function Entity:IsEntityInvulnerable()
Return whether this entity is invulnerable to damage.
				</summary>
			</function>
			<function line="2179" name="SetBeenAttacked">
				<summary>function Entity:SetBeenAttacked()
Sets that this entity has been attacked.
				</summary>
			</function>
			<function line="2186" name="AttackEntityFrom">
				<summary>function Entity:AttackEntityFrom(damageSource, amount)
Called when the entity is attacked.
   @param damageSource: what kind of damage. such as DamageSource.inFire, DamageSource.fall, etc.
   @param amount: such as 1. 
				</summary>
				<parameter name="damageSource">what kind of damage. such as DamageSource.inFire, DamageSource.fall, etc.
				</parameter>
				<parameter name="amount">such as 1. 
				</parameter>
			</function>
			<function line="2197" name="EntityDropItem">
				<summary>function Entity:EntityDropItem(itemStack, fOffsetY)
Drops an item at the position of the entity.
   @return the EntityItem
				</summary>
				<parameter name="itemStack"/>
				<parameter name="fOffsetY"/>
				<returns>return EntityItem
				</returns>
			</function>
			<function line="2212" name="UpdateFallState">
				<summary>function Entity:UpdateFallState(distanceFallenThisTick, bIsOnGround)
Drops an item at the position of the entity.
   @return the EntityItem
Takes in the distance the entity has fallen this tick and whether its on the ground to update the fall distance
and deal fall damage if landing on the ground.  Args: distanceFallenThisTick, onGround
   @param distanceFallenThisTick
   @param bIsOnGround
				</summary>
				<parameter name="distanceFallenThisTick">
				</parameter>
				<parameter name="bIsOnGround">
				</parameter>
				<returns>return EntityItem
Takes in the distance the entity has fallen this tick and whether its on the ground to update the fall distance
and deal fall damage if landing on the ground.  Args: distanceFallenThisTick, onGround
				</returns>
			</function>
			<function line="2223" name="IsSneaking">
				<summary>function Entity:IsSneaking()

				</summary>
			</function>
			<function line="2227" name="SetSneaking">
				<summary>function Entity:SetSneaking(bSneaking)

				</summary>
				<parameter name="bSneaking"/>
			</function>
			<function line="2235" name="MoveEntityByDisplacement">
				<summary>function Entity:MoveEntityByDisplacement(dx,dy,dz)
Tries to moves the entity by the passed in displacement. 
this function is usually used by entities which need to process physics all by itself 
(instead of relying on physicsObj or default low level c++).
   @param dx, dy, dz: dispacement
				</summary>
				<parameter name="dx">, dy, dz: dispacement
				</parameter>
				<parameter name="dy"/>
				<parameter name="dz"/>
			</function>
			<function line="2384" name="GetMountedYOffset">
				<summary>function Entity:GetMountedYOffset()

				</summary>
			</function>
			<function line="2390" name="FrameMoveRidding">
				<summary>function Entity:FrameMoveRidding(deltaTime)
framemove this entity when it is riding (mounted) on another entity. 
we will update according to mounted entity's position. 
				</summary>
				<parameter name="deltaTime"/>
			</function>
			<function line="2437" name="GetRidingOffsetY">
				<summary>function Entity:GetRidingOffsetY()

				</summary>
			</function>
			<function line="2441" name="UpdateRiderPosition">
				<summary>function Entity:UpdateRiderPosition()

				</summary>
			</function>
			<function line="2450" name="MountEntity">
				<summary>function Entity:MountEntity(targetEntity)
mount current entity to the target entity.
   @param targetEntity: nil to unmount
				</summary>
				<parameter name="targetEntity">nil to unmount
				</parameter>
			</function>
			<function line="2472" name="HasChanges">
				<summary>function Entity:HasChanges()
whether any trackable data is modified 
				</summary>
			</function>
			<function line="2477" name="SetChanged">
				<summary>function Entity:SetChanged(bChanged)
set changes
				</summary>
				<parameter name="bChanged"/>
			</function>
			<function line="2481" name="GetRotationYaw">
				<summary>function Entity:GetRotationYaw()

				</summary>
			</function>
			<function line="2485" name="GetRotationPitch">
				<summary>function Entity:GetRotationPitch()

				</summary>
			</function>
			<function line="2490" name="GetRotationYawHead">
				<summary>function Entity:GetRotationYawHead()

				</summary>
			</function>
			<function line="2495" name="SetRotationYawHead">
				<summary>function Entity:SetRotationYawHead(value)
Sets the head's yaw rotation of the entity.
				</summary>
				<parameter name="value"/>
			</function>
			<function line="2502" name="GetDataWatcher">
				<summary>function Entity:GetDataWatcher(bCreateIfNotExist)
data in watcher are auto synced among clients by the server, without server validation. 
data in data watcher can be freely modified by both client and server, such as animation, skin, etc.
   @NOTE: do NOT put server-critical data here, use inventory for server verified data.
				</summary>
				<parameter name="bCreateIfNotExist"/>
			</function>
			<function line="2512" name="IsRiding">
				<summary>function Entity:IsRiding()
Returns true if the entity is riding another entity
				</summary>
			</function>
			<function line="2529" name="BeginTouchMove">
				<summary>function Entity:BeginTouchMove()
examples: 
local EntityManager = commonlib.gettable("MyCompany.Aries.Game.EntityManager");
local player = EntityManager.GetPlayer();
player:BeginTouchMove();
player:TouchMove(0);
local mytimer = commonlib.Timer:new({callbackFunc = function(timer)
	player:EndTouchMove();
end})
-- walk 1 seconds
mytimer:Change(1000, nil)
begin touch move towards a given position. 
				</summary>
			</function>
			<function line="2538" name="TouchMove">
				<summary>function Entity:TouchMove(screen_facing)
move according to a facing angle in screen space relative to current camera view. 
call this function between BeginTouchMove() and EndTouchMove(). 
Please note, it will walk forever until EndTouchMove() is called.
   @param screen_facing: [0,2pi], where 0 is running away from camera, pi is running towards camera, etc. 
				</summary>
				<parameter name="screen_facing">[0,2pi], where 0 is running away from camera, pi is running towards camera, etc. 
				</parameter>
			</function>
			<function line="2549" name="EndTouchMove">
				<summary>function Entity:EndTouchMove()
end touch move towards a given position. 
				</summary>
			</function>
			<function line="2562" name="GetNewItemsList">
				<summary>function Entity:GetNewItemsList()
virtual function: get array of item stacks that will be displayed to the user when user try to create a new item.
   @return nil or array of item stack.
				</summary>
				<returns>return or array of item stack.
				</returns>
			</function>
			<function line="2568" name="CreateItemOnSlot">
				<summary>function Entity:CreateItemOnSlot(slot)

   @param slot: type of ItemSlot in Container View, such as self.rulebagView
				</summary>
				<parameter name="slot">type of ItemSlot in Container View, such as self.rulebagView
				</parameter>
			</function>
			<function line="2588" name="OnClickEmptySlot">
				<summary>function Entity:OnClickEmptySlot(slot)
called when user click to create a new item in the slot
   @param slot: type of ItemSlot in Container View, such as self.rulebagView
				</summary>
				<parameter name="slot">type of ItemSlot in Container View, such as self.rulebagView
				</parameter>
			</function>
			<function line="2600" name="EnablePhysics">
				<summary>function Entity:EnablePhysics(bEnable, bForceLoadPhysics)
This function is almost always used to enable polygon level collision for static entities only.  
Please be very careful NOT to enable physics for moving entities. Physics are automatically unloaded 
when geometry or position changed, thus a moving entity may frequently load and unload physics causing performance issues.
   @param bForceLoadPhysics: default to nil. by default it is lazy loading when main player collide with it, one can also explicitly load physics
make sure to call this function after model is loaded (Due to async loading, the model is not loaded until visible by a camera and loading is done in a separate loading thread)
				</summary>
				<parameter name="bEnable"/>
				<parameter name="bForceLoadPhysics">default to nil. by default it is lazy loading when main player collide with it, one can also explicitly load physics
make sure to call this function after model is loaded (Due to async loading, the model is not loaded until visible by a camera and loading is done in a separate loading thread)
				</parameter>
			</function>
			<function line="2614" name="FrameMoveMemoryContext">
				<summary>function Entity:FrameMoveMemoryContext(deltaTime)
only call this function when the entity may has active memory context 
i.e. it has autonomous behaviors on its own.  EntityPlayer can move on its own.
   @return true if the entity is controlled by memory context
				</summary>
				<parameter name="deltaTime"/>
				<returns>return if the entity is controlled by memory context
				</returns>
			</function>
			<function line="2621" name="GetMemoryContext">
				<summary>function Entity:GetMemoryContext()
the memory context
				</summary>
			</function>
			<function line="2632" name="SetColor">
				<summary>function Entity:SetColor(color)
change entity global color
   @param color: 0xff0000 or "#ff00ff"
				</summary>
				<parameter name="color">0xff0000 or "#ff00ff"
				</parameter>
			</function>
			<function line="2647" name="GetColor">
				<summary>function Entity:GetColor()

				</summary>
			</function>
			<function line="2652" name="SetOpacity">
				<summary>function Entity:SetOpacity(opacity)

   @param opacity: [0,1]
				</summary>
				<parameter name="opacity">[0,1]
				</parameter>
			</function>
			<function line="2660" name="GetOpacity">
				<summary>function Entity:GetOpacity()

   @return [0,1]
				</summary>
				<returns>return [0,1]
				</returns>
			</function>
		</table>
		<table name="ItemClient" src="script/apps/Aries/Creator/Game/Items/ItemClient.lua">
			<function line="40" name="PreloadItemClass">
				<summary>function ItemClient.PreloadItemClass()
add new preloaded item class here. 
				</summary>
			</function>
			<function line="78" name="OnInit">
				<summary>function ItemClient.OnInit()

				</summary>
			</function>
			<function line="93" name="RegisterItemClass">
				<summary>function ItemClient.RegisterItemClass(name, class)
register a new class
				</summary>
				<parameter name="name"/>
				<parameter name="class"/>
			</function>
			<function line="98" name="LoadFromCurrentWorld">
				<summary>function ItemClient.LoadFromCurrentWorld()
load both official block list as well as custom user defined block list. 
				</summary>
			</function>
			<function line="104" name="LoadGlobalBlockList">
				<summary>function ItemClient.LoadGlobalBlockList()
private: only load once the official block list. 
				</summary>
			</function>
			<function line="155" name="SaveToCurrentWorld">
				<summary>function ItemClient.SaveToCurrentWorld()

				</summary>
			</function>
			<function line="163" name="AddBlock">
				<summary>function ItemClient.AddBlock(block_id, index, category_name)
add a block at the given index.
   @param index: if nil, it will be added to last block.
   @param category_name: default to "static"
   @return blockDsItem
				</summary>
				<parameter name="block_id"/>
				<parameter name="index">if nil, it will be added to last block.
				</parameter>
				<parameter name="category_name">default to "static"
				</parameter>
				<returns>return 
				</returns>
			</function>
			<function line="177" name="SearchBlocks">
				<summary>function ItemClient.SearchBlocks(block_id_or_name, category_name, ds)
search a given block
   @return a table containing all matching blocks
				</summary>
				<parameter name="block_id_or_name"/>
				<parameter name="category_name"/>
				<parameter name="ds"/>
				<returns>return table containing all matching blocks
				</returns>
			</function>
			<function line="222" name="GetBlockDS">
				<summary>function ItemClient.GetBlockDS(category_name)
get data source by category name
				</summary>
				<parameter name="category_name"/>
			</function>
			<function line="235" name="GetItemCount">
				<summary>function ItemClient.GetItemCount(block_id)

				</summary>
				<parameter name="block_id"/>
			</function>
			<function line="239" name="SetItemCount">
				<summary>function ItemClient.SetItemCount(block_id, count, diff_count)

				</summary>
				<parameter name="block_id"/>
				<parameter name="count"/>
				<parameter name="diff_count"/>
			</function>
			<function line="249" name="AddItem">
				<summary>function ItemClient.AddItem(block_id, item)
add item
				</summary>
				<parameter name="block_id"/>
				<parameter name="item"/>
			</function>
			<function line="270" name="GetItem">
				<summary>function ItemClient.GetItem(block_id)
get item by id
				</summary>
				<parameter name="block_id"/>
			</function>
			<function line="274" name="GetItemByName">
				<summary>function ItemClient.GetItemByName(name)

				</summary>
				<parameter name="name"/>
			</function>
			<function line="284" name="CreateGetByBlockID">
				<summary>function ItemClient.CreateGetByBlockID(block_id, item_class)
create get an item by block id. 
				</summary>
				<parameter name="block_id"/>
				<parameter name="item_class"/>
			</function>
			<function line="293" name="CreateByBlockID">
				<summary>function ItemClient.CreateByBlockID(block_id, item_class)
create and overwrite 
				</summary>
				<parameter name="block_id"/>
				<parameter name="item_class"/>
			</function>
			<function line="312" name="OnLeaveWorld">
				<summary>function ItemClient.OnLeaveWorld()

				</summary>
			</function>
			<function line="338" name="LoadCustomBlocks">
				<summary>function ItemClient.LoadCustomBlocks()
custom block is used defined blocks in the current world directory. 
				</summary>
			</function>
			<function line="365" name="SaveCustomBlocks">
				<summary>function ItemClient.SaveCustomBlocks()
custom block is user defined blocks in the current world directory. 
				</summary>
			</function>
			<function line="387" name="GetNextCustomBlockId">
				<summary>function ItemClient.GetNextCustomBlockId()
next custom block id
				</summary>
			</function>
			<function line="398" name="GetCustomBlockByTexture">
				<summary>function ItemClient.GetCustomBlockByTexture(filename)
return item or nil by texture filename. 
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="406" name="UnRegisterCustomItem">
				<summary>function ItemClient.UnRegisterCustomItem(block_id)

				</summary>
				<parameter name="block_id"/>
			</function>
			<function line="412" name="RegisterCustomItem">
				<summary>function ItemClient.RegisterCustomItem(params)

   @param params: a table of {base_block_id, texture, [id], [icon], alphaTestTexture=false, blendedTexture=false, transparent=false}
if params.id is not specified, we will generate an unused id instead.
please note the same texture filename will always generate the same id. 
				</summary>
				<parameter name="params">a table of {base_block_id, texture, [id], [icon], alphaTestTexture=false, blendedTexture=false, transparent=false}
if params.id is not specified, we will generate an unused id instead.
please note the same texture filename will always generate the same id. 
				</parameter>
			</function>
		</table>
		<table name="Item" src="script/apps/Aries/Creator/Game/Items/Item.lua">
			<function line="65" name="ctor">
				<summary>function Item:ctor()

   @param template: icon
   @param icon:
   @param block_id:
				</summary>
			</function>
			<function line="75" name="GetMaxCount">
				<summary>function Item:GetMaxCount()

				</summary>
			</function>
			<function line="80" name="GetBlock">
				<summary>function Item:GetBlock()
get block template. 
				</summary>
			</function>
			<function line="86" name="GetSelectedItemStack">
				<summary>function Item:GetSelectedItemStack()
static function:
get item current selected item stack
				</summary>
			</function>
			<function line="92" name="OnItemRightClick">
				<summary>function Item:OnItemRightClick(itemStack, entityPlayer)
Called whenever this item is equipped and the right mouse button is pressed.
   @return itemStack, hasHandled:  the new item stack to put in the position. hasHandled is true if handled. 
				</summary>
				<parameter name="itemStack"/>
				<parameter name="entityPlayer"/>
				<returns>return , hasHandled:  the new item stack to put in the position. hasHandled is true if handled. 
				</returns>
			</function>
			<function line="97" name="OnLeaveWorld">
				<summary>function Item:OnLeaveWorld()
virtual function, called when world is closed. 
				</summary>
			</function>
			<function line="102" name="OnClickInHand">
				<summary>function Item:OnClickInHand(itemStack, entityPlayer)
called whenever this item is clicked on the user interface when it is holding in hand of a given player (current player). 
by default, if there is selected blocks, we will replace selection with current block in hand. 
				</summary>
				<parameter name="itemStack"/>
				<parameter name="entityPlayer"/>
			</function>
			<function line="117" name="HandleClickOtherItem">
				<summary>function Item:HandleClickOtherItem(other_item_id)
virtual function: called when user clicked some other item while holding this item in hand.
   @return true will cause other item to ignore the click event. This is useful when the hand block needs to process click event itself
				</summary>
				<parameter name="other_item_id"/>
				<returns>return will cause other item to ignore the click event. This is useful when the hand block needs to process click event itself
				</returns>
			</function>
			<function line="122" name="OnClick">
				<summary>function Item:OnClick()
virtual: click from user interface
				</summary>
			</function>
			<function line="161" name="OnActivate">
				<summary>function Item:OnActivate(itemStack, entityContainer, entityTrigger)
called when this function is activated when the entity is activated. 
it will return false when the last trigger entity's inventory has more than itemStack.count items.
   @param itemStack: the containing itemStack
   @param entity: this is usually a command block or entity that contains this entity.
   @param entityPlayer: the triggering entity
   @return false if the entity should stop activating other items in its bag. 
				</summary>
				<parameter name="itemStack">the containing itemStack
				</parameter>
				<parameter name="entityContainer"/>
				<parameter name="entityTrigger"/>
				<returns>return if the entity should stop activating other items in its bag. 
				</returns>
			</function>
			<function line="172" name="handleEntityEvent">
				<summary>function Item:handleEntityEvent(itemStack, entity, event)
called when entity receives a custom event via one of its rule bag items. 
				</summary>
				<parameter name="itemStack"/>
				<parameter name="entity"/>
				<parameter name="event"/>
			</function>
			<function line="176" name="CanSpawn">
				<summary>function Item:CanSpawn()
whether the item can be spawned using spawn command. 
				</summary>
			</function>
			<function line="183" name="CanCreateItemAt">
				<summary>function Item:CanCreateItemAt(x,y,z)
whether we can create item at given block position.
only basic check is performed. such as:  
we allow any block(except liquid) to create on empty or liquid block.
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="192" name="GetMaxDamage">
				<summary>function Item:GetMaxDamage()
max durability. nil for infinite (not damagable). 
				</summary>
			</function>
			<function line="197" name="CanItemEditBlocks">
				<summary>function Item:CanItemEditBlocks()
Returns true if players can use this item to affect the world (e.g. placing blocks, placing ender eyes in portal)
				</summary>
			</function>
			<function line="202" name="OnUseItem">
				<summary>function Item:OnUseItem(itemStack, fromEntity)
called when this item is used and deal 2 damage to the item's durability. 
				</summary>
				<parameter name="itemStack"/>
				<parameter name="fromEntity"/>
			</function>
			<function line="211" name="CanPlaceOnSide">
				<summary>function Item:CanPlaceOnSide(x,y,z,side, data, side_region, entityPlayer, itemStack)
Returns true if the given Entity can be placed on the given side of the given block position.
   @param x,y,z: this is the position where the block should be placed
   @param side: this is the OPPOSITE of the side of contact. 
				</summary>
				<parameter name="x">,y,z: this is the position where the block should be placed
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="side">this is the OPPOSITE of the side of contact. 
				</parameter>
				<parameter name="data"/>
				<parameter name="side_region"/>
				<parameter name="entityPlayer"/>
				<parameter name="itemStack"/>
			</function>
			<function line="235" name="TryCreate">
				<summary>function Item:TryCreate(itemStack, entityPlayer, x,y,z, side, data, side_region)
Right clicking in 3d world with the block in hand will trigger this function. 
Alias: OnUseItem;
   @param itemStack: can be nil
   @param entityPlayer: can be nil
   @param side: this is OPPOSITE of the touching side
   @return isUsed, entityCreated: isUsed is true if something happens.
				</summary>
				<parameter name="itemStack">can be nil
				</parameter>
				<parameter name="entityPlayer">can be nil
				</parameter>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="side">this is OPPOSITE of the touching side
				</parameter>
				<parameter name="data"/>
				<parameter name="side_region"/>
				<returns>return , entityCreated: isUsed is true if something happens.
				</returns>
			</function>
			<function line="295" name="OnCreate">
				<summary>function Item:OnCreate(result)
virtual function:
   @param result: picking result. {block_id, blockX, blockY, blockZ}
   @return: return true if created
				</summary>
				<parameter name="result">picking result. {block_id, blockX, blockY, blockZ}
				</parameter>
				<returns>return return true if created
				</returns>
			</function>
			<function line="300" name="GetIconAtlas">
				<summary>function Item:GetIconAtlas()
static function
get Icon texture altas
				</summary>
			</function>
			<function line="313" name="GetIcon">
				<summary>function Item:GetIcon(block_data)

   @param block_data: default to nil
				</summary>
				<parameter name="block_data">default to nil
				</parameter>
			</function>
			<function line="362" name="GetTexture">
				<summary>function Item:GetTexture()
get the primary texture file for this item. 
				</summary>
			</function>
			<function line="372" name="GetIconObject">
				<summary>function Item:GetIconObject()

   @return ParaAsset icon
				</summary>
				<returns>return icon
				</returns>
			</function>
			<function line="388" name="GetAssetFile">
				<summary>function Item:GetAssetFile()
get the primary asset file
				</summary>
			</function>
			<function line="397" name="GetSkinFile">
				<summary>function Item:GetSkinFile()
get skin 
				</summary>
			</function>
			<function line="405" name="GetTooltipFromItemStack">
				<summary>function Item:GetTooltipFromItemStack(itemStack)

				</summary>
				<parameter name="itemStack"/>
			</function>
			<function line="416" name="GetOffsetY">
				<summary>function Item:GetOffsetY()

				</summary>
			</function>
			<function line="425" name="GetScaling">
				<summary>function Item:GetScaling()

				</summary>
			</function>
			<function line="433" name="HasFacing">
				<summary>function Item:HasFacing()

				</summary>
			</function>
			<function line="436" name="GetTooltip">
				<summary>function Item:GetTooltip()

				</summary>
			</function>
			<function line="453" name="GetBlockData">
				<summary>function Item:GetBlockData(itemStack)
virtual function: try to get block date from itemStack. 
in most cases, this return nil
   @return nil or a number 
				</summary>
				<parameter name="itemStack"/>
				<returns>return or a number 
				</returns>
			</function>
			<function line="456" name="GetStatName">
				<summary>function Item:GetStatName()

				</summary>
			</function>
			<function line="461" name="GetSearchKey">
				<summary>function Item:GetSearchKey()
get a string containing search keys in lower case
				</summary>
			</function>
			<function line="475" name="GetDisplayName">
				<summary>function Item:GetDisplayName()

				</summary>
			</function>
			<function line="489" name="OnUse">
				<summary>function Item:OnUse()
virtual function: use the item. 
				</summary>
			</function>
			<function line="493" name="OnSelect">
				<summary>function Item:OnSelect(itemStack)
virtual function: when selected in right hand
				</summary>
				<parameter name="itemStack"/>
			</function>
			<function line="498" name="OnDeSelect">
				<summary>function Item:OnDeSelect()
virtual function: when deselected in right hand
				</summary>
			</function>
			<function line="503" name="OnLoadWorld">
				<summary>function Item:OnLoadWorld()
virtual function: called when loading world. 
				</summary>
			</function>
			<function line="511" name="UpdateInWorldCount">
				<summary>function Item:UpdateInWorldCount(nDiffCount, bIgnoreUpperConstraint)
update in world count
   @param bIgnoreUpperConstraint: true or nil to ignore self.max_count
   @return count the actual count diff. 
				</summary>
				<parameter name="nDiffCount"/>
				<parameter name="bIgnoreUpperConstraint">true or nil to ignore self.max_count
				</parameter>
				<returns>return the actual count diff. 
				</returns>
			</function>
			<function line="525" name="GetInWorldCount">
				<summary>function Item:GetInWorldCount()
get the number of items that is already used in the current world, such as collectables.
				</summary>
			</function>
			<function line="531" name="CreateBlockPieces">
				<summary>function Item:CreateBlockPieces(blockX, blockY, blockZ, granularity)

   @param granularity: (0-1), 1 will generate 27 pieces, 0 will generate 0 pieces, default to 1. 
				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
				<parameter name="granularity">(0-1), 1 will generate 27 pieces, 0 will generate 0 pieces, default to 1. 
				</parameter>
			</function>
			<function line="543" name="OnObtain">
				<summary>function Item:OnObtain()
called every frame
				</summary>
			</function>
			<function line="546" name="GetItemModel">
				<summary>function Item:GetItemModel()

				</summary>
			</function>
			<function line="554" name="GetItemModelScaling">
				<summary>function Item:GetItemModelScaling()
item scaling when hold in hand. 
				</summary>
			</function>
			<function line="564" name="GetItemModelInHandOffset">
				<summary>function Item:GetItemModelInHandOffset()
item offset when hold in hand.
   @return nil or {x,y,z}
				</summary>
				<returns>return or {x,y,z}
				</returns>
			</function>
			<function line="568" name="CreateItemModel">
				<summary>function Item:CreateItemModel(x,y,z, facing, scaling)

				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="facing"/>
				<parameter name="scaling"/>
			</function>
			<function line="573" name="setMouseTracking">
				<summary>function Item:setMouseTracking(enable)

				</summary>
				<parameter name="enable"/>
			</function>
			<function line="580" name="hasMouseTracking">
				<summary>function Item:hasMouseTracking()
if true, we will receive mouse move event even mouse down is not accepted by the item. 
if false, we will only receive mouse move event if mouse down is accepted. 
default to false. 
				</summary>
			</function>
			<function line="587" name="event">
				<summary>function Item:event(event)
called whenever an event comes. Subclass can overwrite this function.
   @param handlerName: "sizeEvent", "paintEvent", "mouseDownEvent", "mouseUpEvent", etc.
   @param event: the event object. 
				</summary>
				<parameter name="event">the event object. 
				</parameter>
			</function>
			<function line="595" name="mousePressEvent">
				<summary>function Item:mousePressEvent(event)

				</summary>
				<parameter name="event"/>
			</function>
			<function line="597" name="mouseMoveEvent">
				<summary>function Item:mouseMoveEvent(event)

				</summary>
				<parameter name="event"/>
			</function>
			<function line="599" name="mouseReleaseEvent">
				<summary>function Item:mouseReleaseEvent(event)

				</summary>
				<parameter name="event"/>
			</function>
			<function line="601" name="mouseWheelEvent">
				<summary>function Item:mouseWheelEvent(event)

				</summary>
				<parameter name="event"/>
			</function>
			<function line="603" name="keyReleaseEvent">
				<summary>function Item:keyReleaseEvent(event)

				</summary>
				<parameter name="event"/>
			</function>
			<function line="605" name="keyPressEvent">
				<summary>function Item:keyPressEvent(event)

				</summary>
				<parameter name="event"/>
			</function>
			<function line="610" name="PickItemFromPosition">
				<summary>function Item:PickItemFromPosition(x,y,z)
virtual:
when alt key is pressed to pick a block in edit mode. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="631" name="ConvertEntityToItem">
				<summary>function Item:ConvertEntityToItem(entity)
virtual: convert entity to item stack. 
such as when alt key is pressed to pick a entity in edit mode. 
				</summary>
				<parameter name="entity"/>
			</function>
			<function line="639" name="CompareItems">
				<summary>function Item:CompareItems(left, right)
virtual:
compare two item stacks of the same item. 
return true if items are the same.
   @param left, right: type of ItemStack or nil. 
				</summary>
				<parameter name="left">, right: type of ItemStack or nil. 
				</parameter>
				<parameter name="right"/>
			</function>
			<function line="647" name="HasColorData">
				<summary>function Item:HasColorData()

				</summary>
			</function>
			<function line="660" name="IsColorData8Bits">
				<summary>function Item:IsColorData8Bits()
whether we use 8 bits color data 
				</summary>
			</function>
			<function line="675" name="ColorToData">
				<summary>function Item:ColorToData(color, bitCount)
static function: from color to data
   @param bitCount: 8 or 16, default to current item setting
				</summary>
				<parameter name="color"/>
				<parameter name="bitCount">8 or 16, default to current item setting
				</parameter>
			</function>
			<function line="685" name="DataToColor">
				<summary>function Item:DataToColor(data, bitCount)

   @param bitCount: 8 or 16, default to current item setting
   @return without alpha, 0xff0000
				</summary>
				<parameter name="data"/>
				<parameter name="bitCount">8 or 16, default to current item setting
				</parameter>
				<returns>return alpha, 0xff0000
				</returns>
			</function>
			<function line="698" name="DrawIcon">
				<summary>function Item:DrawIcon(painter, width, height, itemStack)
virtual: draw icon with given size at current position (0,0)
this function is only called when IsOwnerDrawIcon property is true.
   @param width, height: size of the icon
   @param itemStack: this may be nil. or itemStack instance. 
				</summary>
				<parameter name="painter"/>
				<parameter name="width">, height: size of the icon
				</parameter>
				<parameter name="height"/>
				<parameter name="itemStack">this may be nil. or itemStack instance. 
				</parameter>
			</function>
		</table>
		<table name="ItemStack" src="script/apps/Aries/Creator/Game/Items/ItemStack.lua">
			<function line="32" name="ctor">
				<summary>function ItemStack:ctor()

   @param template: icon
   @param icon:
   @param block_id:
				</summary>
			</function>
			<function line="37" name="Init">
				<summary>function ItemStack:Init(id, count, serverdata)

   @param id: the underlying item id.
   @param serverdata: this should be xml node table or nil. 
				</summary>
				<parameter name="id">the underlying item id.
				</parameter>
				<parameter name="count"/>
				<parameter name="serverdata">this should be xml node table or nil. 
				</parameter>
			</function>
			<function line="44" name="GetItem">
				<summary>function ItemStack:GetItem()

				</summary>
			</function>
			<function line="49" name="GetData">
				<summary>function ItemStack:GetData()
get user data 
				</summary>
			</function>
			<function line="58" name="SetData">
				<summary>function ItemStack:SetData(data)
set user data 
				</summary>
				<parameter name="data"/>
			</function>
			<function line="70" name="SetPreferredBlockData">
				<summary>function ItemStack:SetPreferredBlockData(data)

				</summary>
				<parameter name="data"/>
			</function>
			<function line="74" name="GetPreferredBlockData">
				<summary>function ItemStack:GetPreferredBlockData()

				</summary>
			</function>
			<function line="79" name="GetScriptScope">
				<summary>function ItemStack:GetScriptScope()
create or get script scope
				</summary>
			</function>
			<function line="90" name="SetScript">
				<summary>function ItemStack:SetScript(filename)
set script and automatically reload if a different file is specified. 
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="106" name="SetCode">
				<summary>function ItemStack:SetCode(code)
set the raw code to run
				</summary>
				<parameter name="code"/>
			</function>
			<function line="122" name="RunCode">
				<summary>function ItemStack:RunCode(...)
run the entire script code again with given parameters. 
				</summary>
			</function>
			<function line="135" name="HasScript">
				<summary>function ItemStack:HasScript()
whether has script file or raw code
				</summary>
			</function>
			<function line="143" name="CheckLoadScript">
				<summary>function ItemStack:CheckLoadScript(bReload, bRunOnFirstLoad)
check load script code if any. It will only load on first call. Subsequent calls will be very fast. 
usually one do not need to call this function explicitly, unless one wants to preload or reload.
   @param bReload: default to nil.
   @param bRunOnFirstLoad: true to run on first load. if nil it means true
				</summary>
				<parameter name="bReload">default to nil.
				</parameter>
				<parameter name="bRunOnFirstLoad">true to run on first load. if nil it means true
				</parameter>
			</function>
			<function line="185" name="GetScriptFunction">
				<summary>function ItemStack:GetScriptFunction(func_name, bReload)
get script function if any.
   @param func_name: some known functions are "main"
   @return the function or nil is returned. 
				</summary>
				<parameter name="func_name">some known functions are "main"
				</parameter>
				<parameter name="bReload"/>
				<returns>return function or nil is returned. 
				</returns>
			</function>
			<function line="192" name="GetPosition">
				<summary>function ItemStack:GetPosition()

				</summary>
			</function>
			<function line="197" name="SetPosition">
				<summary>function ItemStack:SetPosition(x, y, z)
set block position
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="203" name="ActivateScript">
				<summary>function ItemStack:ActivateScript(...)
activate script associated by SetScript() function.
   @param entity: the message to be passed to main function. 
				</summary>
			</function>
			<function line="219" name="OnActivate">
				<summary>function ItemStack:OnActivate(entityContainer, entityPlayer)
called when this function is activated when the entity is activated.
   @param entity: the container entity. this is usually a command block or entity.
   @param entityPlayer: the triggering entity
   @return true if the entity should stop activating other items in its bag. 
				</summary>
				<parameter name="entityContainer"/>
				<parameter name="entityPlayer">the triggering entity
				</parameter>
				<returns>return if the entity should stop activating other items in its bag. 
				</returns>
			</function>
			<function line="227" name="handleEntityEvent">
				<summary>function ItemStack:handleEntityEvent(entity, event)
called when entity receives a custom event via one of its rule bag items. 
				</summary>
				<parameter name="entity"/>
				<parameter name="event"/>
			</function>
			<function line="235" name="LoadFromXMLNode">
				<summary>function ItemStack:LoadFromXMLNode(node)

				</summary>
				<parameter name="node"/>
			</function>
			<function line="250" name="SerializeXMLData">
				<summary>function ItemStack:SerializeXMLData(sData)

				</summary>
				<parameter name="sData"/>
			</function>
			<function line="259" name="SaveToXMLNode">
				<summary>function ItemStack:SaveToXMLNode(node, bSort)

				</summary>
				<parameter name="node"/>
				<parameter name="bSort"/>
			</function>
			<function line="281" name="SplitStack">
				<summary>function ItemStack:SplitStack(count)
Remove the count number of items from the stack. Return a new stack object with count size.
   @param count: if nil, it will be the total count. 
				</summary>
				<parameter name="count">if nil, it will be the total count. 
				</parameter>
			</function>
			<function line="294" name="GetMaxStackSize">
				<summary>function ItemStack:GetMaxStackSize()
returns max allowed size of the item.
				</summary>
			</function>
			<function line="303" name="IsStackable">
				<summary>function ItemStack:IsStackable()
if the ItemStack can hold 2 or more units of the item.
				</summary>
			</function>
			<function line="308" name="IsSameItem">
				<summary>function ItemStack:IsSameItem(itemStack)
return true if item is same, both id and serverdata mathes
				</summary>
				<parameter name="itemStack"/>
			</function>
			<function line="321" name="Copy">
				<summary>function ItemStack:Copy()
return a copy of self. 
				</summary>
			</function>
			<function line="334" name="Swap">
				<summary>function ItemStack:Swap(itemStack)
swapping all content: id, count and data
				</summary>
				<parameter name="itemStack"/>
			</function>
			<function line="344" name="GetIcon">
				<summary>function ItemStack:GetIcon()
get icon 
				</summary>
			</function>
			<function line="352" name="GetBlock">
				<summary>function ItemStack:GetBlock()
get block template. 
				</summary>
			</function>
			<function line="361" name="GetDataField">
				<summary>function ItemStack:GetDataField(fieldname)
get data field
   @param fieldname: "tooltip", "durability", etc
				</summary>
				<parameter name="fieldname">"tooltip", "durability", etc
				</parameter>
			</function>
			<function line="372" name="SetDataField">
				<summary>function ItemStack:SetDataField(fieldname, value)
set data field to be stored
   @param fieldname: "tooltip", "durability"
				</summary>
				<parameter name="fieldname">"tooltip", "durability"
				</parameter>
				<parameter name="value"/>
			</function>
			<function line="389" name="GetIconText">
				<summary>function ItemStack:GetIconText()
this is the text shown at the right bottom of the icon in pe:slot control. 
by default, this is count if bigger than 1, and "" if count is 1
if the displayname contains [XXX], text in square brackets will also be displayed. 
				</summary>
			</function>
			<function line="405" name="GetTooltip">
				<summary>function ItemStack:GetTooltip()
get tooltip
				</summary>
			</function>
			<function line="412" name="GetDisplayName">
				<summary>function ItemStack:GetDisplayName()

				</summary>
			</function>
			<function line="421" name="SetDisplayName">
				<summary>function ItemStack:SetDisplayName(name)

				</summary>
				<parameter name="name"/>
			</function>
			<function line="426" name="SetTooltip">
				<summary>function ItemStack:SetTooltip(value)
set user defined tooltip. 
				</summary>
				<parameter name="value"/>
			</function>
			<function line="432" name="SetDurability">
				<summary>function ItemStack:SetDurability(value)
durablity: do not call this function directly, call :AttemptDamageItem() instead. 
only call this function when you are setting an undurable item to become durable via command line, etc. 
				</summary>
				<parameter name="value"/>
			</function>
			<function line="437" name="GetDurability">
				<summary>function ItemStack:GetDurability()
nil means infinit.
				</summary>
			</function>
			<function line="449" name="IsItemStackDamageable">
				<summary>function ItemStack:IsItemStackDamageable()
true if this itemStack is damageable
				</summary>
			</function>
			<function line="457" name="IsItemDamaged">
				<summary>function ItemStack:IsItemDamaged()
returns true when a damageable item is damaged
				</summary>
			</function>
			<function line="462" name="GetMaxDamage">
				<summary>function ItemStack:GetMaxDamage()
Returns the max damage(durabilitt) an item in the stack can take.
				</summary>
			</function>
			<function line="472" name="AttemptDamageItem">
				<summary>function ItemStack:AttemptDamageItem(amount)
Attempts to damage the ItemStack with amount of damage. 
Returns true if it takes more damage than GetMaxDamage(). 
Returns false otherwise or if the ItemStack can't be damaged
				</summary>
				<parameter name="amount"/>
			</function>
			<function line="484" name="DamageItem">
				<summary>function ItemStack:DamageItem(amount, fromEntity)
Damages the item in the ItemStack
				</summary>
				<parameter name="amount"/>
				<parameter name="fromEntity"/>
			</function>
			<function line="515" name="CanEditBlocks">
				<summary>function ItemStack:CanEditBlocks()

				</summary>
			</function>
			<function line="523" name="TryCreate">
				<summary>function ItemStack:TryCreate(entityPlayer, x,y,z, side, data, side_region)

   @param side: this is OPPOSITE of the touching side
				</summary>
				<parameter name="entityPlayer"/>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="side">this is OPPOSITE of the touching side
				</parameter>
				<parameter name="data"/>
				<parameter name="side_region"/>
			</function>
			<function line="536" name="OnItemRightClick">
				<summary>function ItemStack:OnItemRightClick(entityPlayer)
Called whenever this item is equipped and the right mouse button is pressed.
   @return the new item stack to put in the position.
				</summary>
				<parameter name="entityPlayer"/>
				<returns>return new item stack to put in the position.
				</returns>
			</function>
		</table>
		<table name="block_types" src="script/apps/Aries/Creator/Game/blocks/block_types.lua">
			<function line="93" name="PreloadBlockClass">
				<summary>function block_types.PreloadBlockClass()
load known block type
				</summary>
			</function>
			<function line="148" name="init">
				<summary>function block_types.init()
block_types.register_basics
				</summary>
			</function>
			<function line="154" name="OnWorldLoaded">
				<summary>function block_types:OnWorldLoaded()
called when world is just loaded
				</summary>
			</function>
			<function line="163" name="RegisterBlockClass">
				<summary>function block_types.RegisterBlockClass(name, class)
register a new block class
				</summary>
				<parameter name="name"/>
				<parameter name="class"/>
			</function>
			<function line="167" name="RegisterItemClass">
				<summary>function block_types.RegisterItemClass(name, class)

				</summary>
				<parameter name="name"/>
				<parameter name="class"/>
			</function>
			<function line="172" name="GetBlockClass">
				<summary>function block_types.GetBlockClass(block_)
get block class
				</summary>
				<parameter name="block_"/>
			</function>
			<function line="182" name="GetItemClass">
				<summary>function block_types.GetItemClass(class_name)
get item class by name
				</summary>
				<parameter name="class_name"/>
			</function>
			<function line="187" name="IsAssociatedBlockID">
				<summary>function block_types.IsAssociatedBlockID(block_id1, block_id2)
such as the open door block and closed door block are associated. 
				</summary>
				<parameter name="block_id1"/>
				<parameter name="block_id2"/>
			</function>
			<function line="201" name="register_new_type">
				<summary>function block_types.register_new_type(block_, bCallRegister)
register a new block type. It will overwrite whatever is registered before.
   @param block_: the block template object or a pure table of {id, ...} which will be used to construct a block template object.
   @param bCallRegister: true to invoke the low level block registration with the game engine. 
				</summary>
				<parameter name="block_">the block template object or a pure table of {id, ...} which will be used to construct a block template object.
				</parameter>
				<parameter name="bCallRegister">true to invoke the low level block registration with the game engine. 
				</parameter>
			</function>
			<function line="220" name="create_get_type">
				<summary>function block_types.create_get_type(id, params_default)
create get the template params by template id.
				</summary>
				<parameter name="id"/>
				<parameter name="params_default"/>
			</function>
			<function line="229" name="GetAllBlocksWithTexture">
				<summary>function block_types.GetAllBlocksWithTexture(filename)

				</summary>
				<parameter name="filename"/>
			</function>
			<function line="242" name="replace_texture">
				<summary>function block_types.replace_texture(id, filename, texture_index, bReplaceAllBlocks)
replace texture at runtime
   @param bReplaceAllBlocks: true to replace all blocks with the given texture filename.
				</summary>
				<parameter name="id"/>
				<parameter name="filename"/>
				<parameter name="texture_index"/>
				<parameter name="bReplaceAllBlocks">true to replace all blocks with the given texture filename.
				</parameter>
			</function>
			<function line="259" name="restore_texture_pack">
				<summary>function block_types.restore_texture_pack()
restore all textures to its default value. 
				</summary>
			</function>
			<function line="266" name="get">
				<summary>function block_types.get(id)
return a given block template
				</summary>
				<parameter name="id"/>
			</function>
			<function line="271" name="GetByNameOrID">
				<summary>function block_types.GetByNameOrID(id)

   @param id: string or number. it can also be number string, such as "Water", "63", 63 are all valid. 
				</summary>
				<parameter name="id">string or number. it can also be number string, such as "Water", "63", 63 are all valid. 
				</parameter>
			</function>
			<function line="287" name="GetTooltip">
				<summary>function block_types.GetTooltip(id)
return tooltip
				</summary>
				<parameter name="id"/>
			</function>
			<function line="375" name="add_mc_id">
				<summary>function block_types.add_mc_id(mc_id, block_id)

				</summary>
				<parameter name="mc_id"/>
				<parameter name="block_id"/>
			</function>
			<function line="396" name="LoadBlockTemplates">
				<summary>function block_types.LoadBlockTemplates(filename)

				</summary>
				<parameter name="filename"/>
			</function>
			<function line="424" name="ApplyTemplate">
				<summary>function block_types.ApplyTemplate(name, dest_node, filename)
apply a given block template by name to the given xml node. 
				</summary>
				<parameter name="name"/>
				<parameter name="dest_node"/>
				<parameter name="filename"/>
			</function>
			<function line="457" name="LoadFromFile">
				<summary>function block_types.LoadFromFile(filename)
loading all block definition from file
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="624" name="register_basics">
				<summary>function block_types.register_basics()
basic types
				</summary>
			</function>
			<function line="637" name="GenerateFromDirFile">
				<summary>function block_types.GenerateFromDirFile(filename)
dev only function:
   @filename: type in cmd.exe "dir &gt;filename.txt" and then use this function. 
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="670" name="update_registered_templates">
				<summary>function block_types.update_registered_templates(blockWorld)
update the re-register all templates with the low level game engine.
   @param blockWorld: the ParaBlockWorld object. if nil, the default client block world is used. 
				</summary>
				<parameter name="blockWorld">the ParaBlockWorld object. if nil, the default client block world is used. 
				</parameter>
			</function>
		</table>
		<table name="block_model" src="script/apps/Aries/Creator/Game/blocks/block_types.lua">
			<function line="298" name="ctor">
				<summary>function block_model:ctor()
------------------------
block_model class
------------------------
				</summary>
			</function>
			<function line="342" name="GetAssetObject">
				<summary>function block_model:GetAssetObject()
get the default asset object. 
				</summary>
			</function>
			<function line="349" name="NeedUpdateLayer">
				<summary>function block_model:NeedUpdateLayer(layer)
whether the model need to update layer one
whether the model need to update layer 1
				</summary>
				<parameter name="layer"/>
			</function>
			<function line="360" name="GetMainTextureFileName">
				<summary>function block_model:GetMainTextureFileName()
for breaking into pieces animation. 
				</summary>
			</function>
		</table>
		<table name="block" src="script/apps/Aries/Creator/Game/blocks/block.lua">
			<function line="95" name="ctor">
				<summary>function block:ctor()

   @param id: uint16 type. need to be larger than 1024 if not system type. 
				</summary>
			</function>
			<function line="140" name="isBlockNormalCube">
				<summary>function block:isBlockNormalCube()
Indicate if a material is a normal solid opaque cube. Normal cube block also provide weak power when activated by a wire. 
				</summary>
			</function>
			<function line="145" name="LoadSound">
				<summary>function block:LoadSound(name, max_count, volume, pitch)
not used. allowing to specify "glass4", and "glass[1-4]" is used. 
				</summary>
				<parameter name="name"/>
				<parameter name="max_count"/>
				<parameter name="volume"/>
				<parameter name="pitch"/>
			</function>
			<function line="173" name="Init">
				<summary>function block:Init()

				</summary>
			</function>
			<function line="177" name="get_id">
				<summary>function block:get_id()

				</summary>
			</function>
			<function line="182" name="SetTexture">
				<summary>function block:SetTexture(filename, texture_index)

   @param texture_index: nil to default to 1
				</summary>
				<parameter name="filename"/>
				<parameter name="texture_index">nil to default to 1
				</parameter>
			</function>
			<function line="192" name="GetTexture">
				<summary>function block:GetTexture(texture_index)

   @param texture_index: nil to default to 1
				</summary>
				<parameter name="texture_index">nil to default to 1
				</parameter>
			</function>
			<function line="201" name="GetCurrentTexture">
				<summary>function block:GetCurrentTexture()
get the current texture
				</summary>
			</function>
			<function line="208" name="GetTextureObj">
				<summary>function block:GetTextureObj(texture_index)

   @param texture_index: nil to default to 1
   @return nil, false or the texture asset object. 
				</summary>
				<parameter name="texture_index">nil to default to 1
				</parameter>
				<returns>return , false or the texture asset object. 
				</returns>
			</function>
			<function line="248" name="SetTileFromFilename">
				<summary>function block:SetTileFromFilename(filename)

				</summary>
				<parameter name="filename"/>
			</function>
			<function line="257" name="GetTileSize">
				<summary>function block:GetTileSize()
default to 1
				</summary>
			</function>
			<function line="263" name="ReplaceTexture">
				<summary>function block:ReplaceTexture(filename, texture_index, bNoRestore)

   @param texture_index: nil to default to 1
   @param bNoRestore: if true, we will not save the new texture to self.new_texture for automatic restore. 
				</summary>
				<parameter name="filename"/>
				<parameter name="texture_index">nil to default to 1
				</parameter>
				<parameter name="bNoRestore">if true, we will not save the new texture to self.new_texture for automatic restore. 
				</parameter>
			</function>
			<function line="320" name="RestoreTexture">
				<summary>function block:RestoreTexture()

				</summary>
			</function>
			<function line="350" name="GetIcon">
				<summary>function block:GetIcon()

				</summary>
			</function>
			<function line="368" name="SetAttribute">
				<summary>function block:SetAttribute(name, value)
set per template attribute
				</summary>
				<parameter name="name"/>
				<parameter name="value"/>
			</function>
			<function line="382" name="UpdateAttribute">
				<summary>function block:UpdateAttribute(name, value)
update attribute. 
				</summary>
				<parameter name="name"/>
				<parameter name="value"/>
			</function>
			<function line="392" name="SetSpeedReduction">
				<summary>function block:SetSpeedReduction(value)
set speed reduction percentage of current block type.
   @param value : [0,1]. by default water and web has 0.4, and 0.33 reduction. 
				</summary>
				<parameter name="value">[0,1]. by default water and web has 0.4, and 0.33 reduction. 
				</parameter>
			</function>
			<function line="398" name="SetVisible">
				<summary>function block:SetVisible(bVisible)
make all blocks of this type visible or invisible. Please note, invisible block will maintain all of its functions. 
one may like to hide blocks like movie blocks in game mode. 
				</summary>
				<parameter name="bVisible"/>
			</function>
			<function line="403" name="SetLightValue">
				<summary>function block:SetLightValue(nValue)

   @param nValue: [0-15] a value of 0 means no light. 
				</summary>
				<parameter name="nValue">[0-15] a value of 0 means no light. 
				</parameter>
			</function>
			<function line="408" name="GetSpeedReduction">
				<summary>function block:GetSpeedReduction()

				</summary>
			</function>
			<function line="412" name="RecomputeAttribute">
				<summary>function block:RecomputeAttribute()

				</summary>
			</function>
			<function line="432" name="GetAttribute">
				<summary>function block:GetAttribute(name)

				</summary>
				<parameter name="name"/>
			</function>
			<function line="438" name="Highlight">
				<summary>function block:Highlight()

				</summary>
			</function>
			<function line="443" name="Register">
				<summary>function block:Register(blockWorld)
register this block template
   @param blockWorld: the ParaBlockWorld object. if nil, the default client block world is used. 
				</summary>
				<parameter name="blockWorld">the ParaBlockWorld object. if nil, the default client block world is used. 
				</parameter>
			</function>
			<function line="460" name="getMobilityFlag">
				<summary>function block:getMobilityFlag()
Returns the mobility information of the block, 0 = free, 1 = can't push but can move over, 2 = total immobility and stop pistons
				</summary>
			</function>
			<function line="465" name="setHardness">
				<summary>function block:setHardness(value)
Sets how many hits it takes to break a block.
				</summary>
				<parameter name="value"/>
			</function>
			<function line="473" name="setBlockUnbreakable">
				<summary>function block:setBlockUnbreakable()
This method will make the hardness of the block equals to -1, and the block is indestructible.
				</summary>
			</function>
			<function line="478" name="getBlockHardness">
				<summary>function block:getBlockHardness(x,y,z)
Returns the block hardness at a location. Args: world, x, y, z
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="486" name="GetMetaDataFromEnv">
				<summary>function block:GetMetaDataFromEnv(blockX, blockY, blockZ, side, side_region, camx,camy,camz, lookat_x,lookat_y,lookat_z)
get sub meta data according to current player or camera position.
   @param side: user clicked which side. this is *opposite* of the internal side.
   @param side_region: the user clicked which side. can be "upper" or "lower"
   @return metadata, force_condition:  metadata is nil, if no block meta data can be derived. some will only return force_condition table
				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
				<parameter name="side">user clicked which side. this is *opposite* of the internal side.
				</parameter>
				<parameter name="side_region">the user clicked which side. can be "upper" or "lower"
				</parameter>
				<parameter name="camx"/>
				<parameter name="camy"/>
				<parameter name="camz"/>
				<parameter name="lookat_x"/>
				<parameter name="lookat_y"/>
				<parameter name="lookat_z"/>
				<returns>return , force_condition:  metadata is nil, if no block meta data can be derived. some will only return force_condition table
				</returns>
			</function>
			<function line="506" name="OnBlockPlacedBy">
				<summary>function block:OnBlockPlacedBy(x,y,z, entity)
Called when the block is placed in the world.
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="entity"/>
			</function>
			<function line="521" name="Create">
				<summary>function block:Create(x, y, z, bCheckCanCreate, data, side, condition, serverdata)
virtual function: create a new block at the given position. 
TODO: move to game logic, and spawn other blocks if required
   @param x, y, z: block position.
   @param bCheckCanCreate: true to check if the player is inside the block and prevent creation.
   @param data: block data
   @param side: usually a hint for on which block side this block is created on.
   @param condition: a condition table like in block_types.xml. 2,8 and 4,6 are horizontal neighbour. 0 is top, 5 is bottom.   
0(numerical): block must not be of the same type;  
1(numerical): block must be of the same type  -1(numerical): block should be empty  
'solid':block should be solid  'obstruction':block should be obstruction
   @result: return the number of blocks created. if nil, no blocks are created
				</summary>
				<parameter name="x">, y, z: block position.
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="bCheckCanCreate">true to check if the player is inside the block and prevent creation.
				</parameter>
				<parameter name="data">block data
				</parameter>
				<parameter name="side">usually a hint for on which block side this block is created on.
				</parameter>
				<parameter name="condition">a condition table like in block_types.xml. 2,8 and 4,6 are horizontal neighbour. 0 is top, 5 is bottom.   
0(numerical): block must not be of the same type;  
1(numerical): block must be of the same type  -1(numerical): block should be empty  
'solid':block should be solid  'obstruction':block should be obstruction
				</parameter>
				<parameter name="serverdata"/>
			</function>
			<function line="536" name="NearTerrainHole">
				<summary>function block.NearTerrainHole(x, z)
whether the given real world point is near a terrain hole.
   @param cx,cz: center of the block in real coordinates
				</summary>
				<parameter name="x"/>
				<parameter name="z"/>
			</function>
			<function line="543" name="GetTooltip">
				<summary>function block:GetTooltip()

				</summary>
			</function>
			<function line="553" name="GetDisplayName">
				<summary>function block:GetDisplayName()

				</summary>
			</function>
			<function line="559" name="AutoFillUndergroundColumn">
				<summary>function block.AutoFillUndergroundColumn(blockX, blockY, blockZ, bIgnoreThisBlock)
automatically generate blocks in column x,z. where the block at x,y,z must be a valid block either empty or solid.
   @return true, number_blocks_modifed. the first params is true if the current block is not destructible
				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
				<parameter name="bIgnoreThisBlock"/>
				<returns>return , number_blocks_modifed. the first params is true if the current block is not destructible
				</returns>
			</function>
			<function line="658" name="GetModelByBlockData">
				<summary>function block:GetModelByBlockData(blockData)

				</summary>
				<parameter name="blockData"/>
			</function>
			<function line="666" name="GetBestModel">
				<summary>function block:GetBestModel(blockX, blockY, blockZ, blockData, side, force_condition)
get the best model object according to nearby blocks.
   @param side: usually a hint for on which block side this block is created on. 
				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
				<parameter name="blockData"/>
				<parameter name="side">usually a hint for on which block side this block is created on. 
				</parameter>
				<parameter name="force_condition"/>
			</function>
			<function line="805" name="PreloadAsset">
				<summary>function block:PreloadAsset()
preload asset model. 
				</summary>
			</function>
			<function line="837" name="OnBlockAdded">
				<summary>function block:OnBlockAdded(blockX, blockY, blockZ, block_data, serverdata)
virtual function
				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
				<parameter name="block_data"/>
				<parameter name="serverdata"/>
			</function>
			<function line="842" name="OnBlockEvent">
				<summary>function block:OnBlockEvent(x,y,z, event_id, event_param)
when ever an event is received. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="event_id"/>
				<parameter name="event_param"/>
			</function>
			<function line="847" name="GetDroppedItemStack">
				<summary>function block:GetDroppedItemStack(x,y,z, bForceDrop)
get the item stack when this block is broken &amp; dropped. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="bForceDrop"/>
			</function>
			<function line="854" name="OnUserBreakItem">
				<summary>function block:OnUserBreakItem(x,y,z, entityPlayer, lastBlockData)
only called when user clicks to break an item 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="entityPlayer"/>
				<parameter name="lastBlockData"/>
			</function>
			<function line="864" name="DropBlockAsItem">
				<summary>function block:DropBlockAsItem(x,y,z, bForceDrop)
when ever this block is about to be destroyed and one may call this function to drop as an item first.
   @Note: this function should always be called before item is removed.
   @param bForceDrop: if true, we will drop regardless of game mode
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="bForceDrop">if true, we will drop regardless of game mode
				</parameter>
			</function>
			<function line="878" name="OnNeighborChanged">
				<summary>function block:OnNeighborChanged(x,y,z,neighbor_block_id)
virtual function: Lets the block know when one of its neighbor changes. Doesn't know which neighbor changed (coordinates passed are their own) 
called when neighbour has changed. be careful of recursive calls.
   @param x, y, z:
   @param neighbor_block_id:
				</summary>
				<parameter name="x">, y, z:
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="neighbor_block_id">
				</parameter>
			</function>
			<function line="888" name="updateTick">
				<summary>function block:updateTick(x,y,z)
called on framemove.
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="893" name="IsAssociatedBlockID">
				<summary>function block:IsAssociatedBlockID(block_id)
return true if the block_id is associated block, such as an open door and closed door. 
				</summary>
				<parameter name="block_id"/>
			</function>
			<function line="898" name="CanDestroyBlockAt">
				<summary>function block:CanDestroyBlockAt(x,y,z)
default to return true, unless there is an can destroy rule. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="910" name="SetRule_CanDestroy">
				<summary>function block:SetRule_CanDestroy(rule)
set whether a given block can be placed onto another block.
   @param rule: rule or nil. nil to remove the rule. 
				</summary>
				<parameter name="rule">rule or nil. nil to remove the rule. 
				</parameter>
			</function>
			<function line="916" name="canPlaceBlockAt">
				<summary>function block:canPlaceBlockAt(x,y,z)
virtual: Checks to see if its valid to put this block at the specified coordinates. Args: world, x, y, z
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="930" name="SetRule_CanPlace">
				<summary>function block:SetRule_CanPlace(rule)
set whether a given block can be placed onto another block.
   @param rule: rule or nil. nil to remove the rule. 
				</summary>
				<parameter name="rule">rule or nil. nil to remove the rule. 
				</parameter>
			</function>
			<function line="937" name="canPlaceBlockOnSide">
				<summary>function block:canPlaceBlockOnSide(x,y,z,side)
checks to see if you can place this block can be placed on that side of a block: BlockLever overrides
   @param x,y,z: this is the position where the block should be placed
   @param side: this is the OPPOSITE of the side of contact.
				</summary>
				<parameter name="x">,y,z: this is the position where the block should be placed
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="side">this is the OPPOSITE of the side of contact.
				</parameter>
			</function>
			<function line="945" name="GetBlockEntity">
				<summary>function block:GetBlockEntity(x,y,z)
get the block entity at the given block position that matches the block's entity class
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="955" name="UpdateModel">
				<summary>function block:UpdateModel(blockX, blockY, blockZ, blockData)
update a block's custom model according to user data. this function is called whenever the block data changes or on load. 
				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
				<parameter name="blockData"/>
			</function>
			<function line="1001" name="isProvidingWeakPower">
				<summary>function block:isProvidingWeakPower(x, y, z, direction)
Returns true if the block is emitting indirect/weak power on the specified side. If isBlockNormalCube
returns true, standard electric power propagation rules will apply instead and this will not be called.
   @param direction: Note that the side is reversed.  eg 4 (up) when checking the bottom of the block.
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="direction">Note that the side is reversed.  eg 4 (up) when checking the bottom of the block.
				</parameter>
			</function>
			<function line="1007" name="isProvidingStrongPower">
				<summary>function block:isProvidingStrongPower(x, y, z, direction)
Returns true if the block is emitting direct/strong power on the specified side.
   @param direction: Note that the side is reversed.  eg 4 (up) when checking the bottom of the block.
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="direction">Note that the side is reversed.  eg 4 (up) when checking the bottom of the block.
				</parameter>
			</function>
			<function line="1012" name="canProvidePower">
				<summary>function block:canProvidePower()
Can this block provide power. 
				</summary>
			</function>
			<function line="1018" name="OnBlockLoaded">
				<summary>function block:OnBlockLoaded(x,y,z, block_data)
called when block is first loaded from disk file to memory
only customModel has this function called. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="block_data"/>
			</function>
			<function line="1025" name="GetEntityClass">
				<summary>function block:GetEntityClass()
get entity class if any. 
				</summary>
			</function>
			<function line="1034" name="DeleteModel">
				<summary>function block:DeleteModel(blockX, blockY, blockZ)

				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
			</function>
			<function line="1046" name="OnBlockRemoved">
				<summary>function block:OnBlockRemoved(blockX, blockY, blockZ, last_id, last_data)
on block removed
				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
				<parameter name="last_id"/>
				<parameter name="last_data"/>
			</function>
			<function line="1053" name="GetSlipperiness">
				<summary>function block:GetSlipperiness()
this decides the acceleration distance when entity is moving on the block. 
0 means no acceleration distance and player stops immediately when it stops moving. 
bigger value means that the player will slide this certain distance before comming to a complete stop. 
				</summary>
			</function>
			<function line="1060" name="Remove">
				<summary>function block:Remove(blockX, blockY, blockZ)
virtual function: remove a block at the given position. 
it will automatically generate terrain blocks if necessary
   @result: return the number of blocks modified. this number may be nil or 1 or larger than one. if some other blocks are auto generated. 
				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
			</function>
			<function line="1106" name="FillTerrainBlock">
				<summary>function block.FillTerrainBlock(blockX, blockY, blockZ, block_id)
static function: Fill blocks according to current terrain height and its surroundings.
   @param block_id: if nil it defaults to block_types.names.underground_shell
				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
				<parameter name="block_id">if nil it defaults to block_types.names.underground_shell
				</parameter>
			</function>
			<function line="1149" name="RemoveTerrainBlock">
				<summary>function block.RemoveTerrainBlock(blockX, blockY, blockZ)
static function: remove the terrain block, we will set holes
				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
			</function>
			<function line="1210" name="GenerateUndergroundBlock">
				<summary>function block.GenerateUndergroundBlock(blockX, blockY, blockZ, block_id)
static function:
auto fill a random underground terrain block at given position.
   @param block_id: if nil it is a random block. 
				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
				<parameter name="block_id">if nil it is a random block. 
				</parameter>
			</function>
			<function line="1216" name="play_break_sound">
				<summary>function block:play_break_sound(x,y,z)

				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1223" name="play_create_sound">
				<summary>function block:play_create_sound(x,y,z)

				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1229" name="play_step_sound">
				<summary>function block:play_step_sound(volume)

				</summary>
				<parameter name="volume"/>
			</function>
			<function line="1235" name="play_click_sound">
				<summary>function block:play_click_sound(x,y,z)

				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1241" name="play_toggle_sound">
				<summary>function block:play_toggle_sound(x,y,z)

				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1247" name="GetItem">
				<summary>function block:GetItem()

				</summary>
			</function>
			<function line="1254" name="CreateBlockPieces">
				<summary>function block:CreateBlockPieces(blockX, blockY, blockZ, granularity, texture_filename, cx, cy, cz, color)

   @param granularity: (0-1), 1 will generate 27 pieces, 0 will generate 0 pieces, default to 1.
   @param cx, cy, cz: center of break point.
   @param color: nil or such as 0xffff0000
				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
				<parameter name="granularity">(0-1), 1 will generate 27 pieces, 0 will generate 0 pieces, default to 1.
				</parameter>
				<parameter name="texture_filename"/>
				<parameter name="cx">, cy, cz: center of break point.
				</parameter>
				<parameter name="cy"/>
				<parameter name="cz"/>
				<parameter name="color">nil or such as 0xffff0000
				</parameter>
			</function>
			<function line="1309" name="GetCustomModel">
				<summary>function block:GetCustomModel(blockX, blockY, blockZ)
get the custom model at the given position.
   @return the paraobject or nil. 
				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
				<returns>return paraobject or nil. 
				</returns>
			</function>
			<function line="1323" name="AddToSelection">
				<summary>function block:AddToSelection(blockX, blockY, blockZ, index)
add the custom model to selection.
   @param index: the selection group id, default to 2.
   @return true if selected
				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
				<parameter name="index">the selection group id, default to 2.
				</parameter>
				<returns>return if selected
				</returns>
			</function>
			<function line="1334" name="GetInternalStateNumber">
				<summary>function block:GetInternalStateNumber(x,y,z)
some block like command blocks, may has an internal state number(like its last output result)
and some block may use its nearby blocks' state number to generate electric output or other behaviors.
   @return nil or a number between [0-15]
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<returns>return or a number between [0-15]
				</returns>
			</function>
			<function line="1341" name="OnClick">
				<summary>function block:OnClick(bx, by, bz, mouse_button, entity, side)
called when the user clicks on the block
   @param side: on which side the block is clicked.
   @return: return true if it is an action block and processed . 
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
				<parameter name="mouse_button"/>
				<parameter name="entity"/>
				<parameter name="side">on which side the block is clicked.
				</parameter>
				<returns>return return true if it is an action block and processed . 
				</returns>
			</function>
			<function line="1353" name="OnEntityCollided">
				<summary>function block:OnEntityCollided(x,y,z, entity, deltaTime)
Triggered whenever an entity collides with this block (enters into the block). Args: world, x, y, z, entity
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="entity"/>
				<parameter name="deltaTime"/>
			</function>
			<function line="1358" name="OnMouseDown">
				<summary>function block:OnMouseDown(x,y,z, mouse_button)
call when use press mouse down button over the block
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="mouse_button"/>
			</function>
			<function line="1367" name="OnActivated">
				<summary>function block:OnActivated(bx, by, bz, entity)
virtual function: some signal is received, such as user click
the default behavior is to activate the neuron block.
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
				<parameter name="entity"/>
			</function>
			<function line="1378" name="OnToggle">
				<summary>function block:OnToggle(bx, by, bz)
some blocks can be toggled to another block. and may event have a toggle function. 
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
			</function>
			<function line="1389" name="OnStep">
				<summary>function block:OnStep(bx, by, bz, entity)
when the player steps on the top surface of the block
some block may have an on step function. 
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
				<parameter name="entity"/>
			</function>
			<function line="1394" name="tickRate">
				<summary>function block:tickRate()
How many simulation steps 
				</summary>
			</function>
			<function line="1399" name="isNormalCube">
				<summary>function block:isNormalCube()
whether block is normal solid cube model that can not provide power. 
				</summary>
			</function>
			<function line="1423" name="GetItemModel">
				<summary>function block:GetItemModel()
get model file for item display
				</summary>
			</function>
			<function line="1455" name="GetOffsetY">
				<summary>function block:GetOffsetY()

				</summary>
			</function>
			<function line="1466" name="GetItemModelScaling">
				<summary>function block:GetItemModelScaling()
model scaling for GetItemModel() as handheld item. 
				</summary>
			</function>
			<function line="1471" name="OnWorldLoaded">
				<summary>function block:OnWorldLoaded()
called when world is loaded
				</summary>
			</function>
			<function line="1476" name="UpdateBlockBounds">
				<summary>function block:UpdateBlockBounds()
set the block bounds and collision AABB. 
				</summary>
			</function>
			<function line="1481" name="SetBlockBounds">
				<summary>function block:SetBlockBounds(minX, minY, minZ, maxX, maxY, maxZ)
input is in local block pos which is scaled by block_size internally. 
				</summary>
				<parameter name="minX"/>
				<parameter name="minY"/>
				<parameter name="minZ"/>
				<parameter name="maxX"/>
				<parameter name="maxY"/>
				<parameter name="maxZ"/>
			</function>
			<function line="1488" name="GetCollisionBoundingBoxFromPool">
				<summary>function block:GetCollisionBoundingBoxFromPool(x,y,z)
Returns a bounding box from the pool of bounding boxes.
this box can change after the pool has been cleared to be reused
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1496" name="AddCollisionBoxesToList">
				<summary>function block:AddCollisionBoxesToList(x,y,z, aabb, list, entity)
Adds all intersecting collision boxes representing this block to a list.
   @param list: in|out array list to hold the output
   @param aabb: only add if collide with this aabb.
   @param entity: 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="aabb">only add if collide with this aabb.
				</parameter>
				<parameter name="list">in|out array list to hold the output
				</parameter>
				<parameter name="entity">
				</parameter>
			</function>
			<function line="1511" name="RotateBlockData">
				<summary>function block:RotateBlockData(blockData, angle, axis)
rotate the block data by the given angle and axis. This is mosted reimplemented in blocks with orientations stored in block data, such as stairs, bones, etc.
   @param blockData: current block data
   @param angle: usually 1.57, -1.57, 3.14, -3.14, 0.
   @param axis: "x|y|z", if nil, it should default to "y" axis
   @return the rotated block data. 
				</summary>
				<parameter name="blockData">current block data
				</parameter>
				<parameter name="angle">usually 1.57, -1.57, 3.14, -3.14, 0.
				</parameter>
				<parameter name="axis">"x|y|z", if nil, it should default to "y" axis
				</parameter>
				<returns>return rotated block data. 
				</returns>
			</function>
			<function line="1521" name="RotateBlockEnityData">
				<summary>function block:RotateBlockEnityData(entityData, angle, axis)
rotate the block entity data by the given angle and axis. This is mosted reimplemented in blocks with orientations stored in entity data, such as BMAX blockmodel, etc.
   @param entityData: current block data
   @param angle: usually 1.57, -1.57, 3.14, -3.14, 0.
   @param axis: "x|y|z", if nil, it should default to "y" axis
   @return the rotated block data. 
				</summary>
				<parameter name="entityData">current block data
				</parameter>
				<parameter name="angle">usually 1.57, -1.57, 3.14, -3.14, 0.
				</parameter>
				<parameter name="axis">"x|y|z", if nil, it should default to "y" axis
				</parameter>
				<returns>return rotated block data. 
				</returns>
			</function>
			<function line="1527" name="RotateBlockDataUsingModelFacing">
				<summary>function block:RotateBlockDataUsingModelFacing(blockData, angle, axis)
helper function: can be used by RotateBlockData() to automatically calculate rotated block facing. 
please note, it will cache last search result to accelerate subsequent calls.
				</summary>
				<parameter name="blockData"/>
				<parameter name="angle"/>
				<parameter name="axis"/>
			</function>
			<function line="1566" name="MirrorBlockData">
				<summary>function block:MirrorBlockData(blockData, axis)
mirror the block data along the given axis. This is mosted reimplemented in blocks with orientations stored in block data, such as stairs, bones, etc.
   @param blockData: current block data
   @param axis: "x|y|z", if nil, it should default to "y" axis
   @return the mirrored block data. 
				</summary>
				<parameter name="blockData">current block data
				</parameter>
				<parameter name="axis">"x|y|z", if nil, it should default to "y" axis
				</parameter>
				<returns>return mirrored block data. 
				</returns>
			</function>
			<function line="1570" name="HasColorData">
				<summary>function block:HasColorData()

				</summary>
			</function>
			<function line="1577" name="GetDiffuseColor">
				<summary>function block:GetDiffuseColor(blockX, blockY, blockZ)
it may return nil or number like 0xffff0000
				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
			</function>
			<function line="1587" name="GetDiffuseColorByData">
				<summary>function block:GetDiffuseColorByData(block_data)
it may return nil or number like 0xffff0000
				</summary>
				<parameter name="block_data"/>
			</function>
			<function line="1597" name="GetBlockColor">
				<summary>function block:GetBlockColor(x,y,z)
return color in RGB, without alpha
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1612" name="SetBlockColor">
				<summary>function block:SetBlockColor(x,y,z, color)

   @param color: like 0xff0000
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="color">like 0xff0000
				</parameter>
			</function>
			<function line="1622" name="GetBlockColorByData">
				<summary>function block:GetBlockColorByData(blockData)
return color in RGB, without alpha
				</summary>
				<parameter name="blockData"/>
			</function>
			<function line="1639" name="CalculatePreferredData">
				<summary>function block:CalculatePreferredData(data, preferredData)

   @param data: current data
   @param preferredData: data containning preferred colors
return new data based on preferredData. In most cases, preferredData are just color data
				</summary>
				<parameter name="data">current data
				</parameter>
				<parameter name="preferredData">data containning preferred colors
return new data based on preferredData. In most cases, preferredData are just color data
				</parameter>
			</function>
			<function line="1652" name="SetObstruction">
				<summary>function block:SetObstruction(bEnabled)
NOT SUPPORTED in C++ YET: whether the block is obstructed
				</summary>
				<parameter name="bEnabled"/>
			</function>
			<function line="1658" name="SetBlockCamera">
				<summary>function block:SetBlockCamera(bEnabled)
NOT SUPPORTED in C++ YET: 
				</summary>
				<parameter name="bEnabled"/>
			</function>
			<function line="1664" name="SetClimbable">
				<summary>function block:SetClimbable(climbable)
NOT SUPPORTED in C++ YET: 
				</summary>
				<parameter name="climbable"/>
			</function>
		</table>
		<table name="Files" src="script/apps/Aries/Creator/Game/Common/Files.lua">
			<function line="36" name="GetWorldFilePath">
				<summary>function Files.GetWorldFilePath(any_filename, search_folder, bCache)

   @param filename: the filename maybe relative to the current world or the SDK root. 
in case it is relative to the world, we will return a path relative to SDK root.
   @param search_folder: if nil, it is current world directory, otherwise, one can specify an additional search folder in addition to current world directory. 
such as "Texture/blocks/human/"
   @return return file relative to SDK root. or nil, if no file is found. 
				</summary>
				<parameter name="any_filename"/>
				<parameter name="search_folder">if nil, it is current world directory, otherwise, one can specify an additional search folder in addition to current world directory. 
such as "Texture/blocks/human/"
				</parameter>
				<parameter name="bCache"/>
				<returns>return file relative to SDK root. or nil, if no file is found. 
				</returns>
			</function>
			<function line="64" name="FileExists">
				<summary>function Files.FileExists(filename)
check if file exists.
   @param filename: can be relative to current world or sdk root. 
				</summary>
				<parameter name="filename">can be relative to current world or sdk root. 
				</parameter>
			</function>
			<function line="71" name="WorldPathToFullPath">
				<summary>function Files.WorldPathToFullPath(filename, bCheckExist)
this function is mostly used to locate a local file resource.
   @param filename: must be relative to world.
   @param bCheckExist: if true, we will only return non-nil filename if the file exist on disk.
				</summary>
				<parameter name="filename">must be relative to world.
				</parameter>
				<parameter name="bCheckExist">if true, we will only return non-nil filename if the file exist on disk.
				</parameter>
			</function>
			<function line="90" name="ClearFindFileCache">
				<summary>function Files:ClearFindFileCache()
call this function when world is loaded. 
				</summary>
			</function>
			<function line="95" name="GetFileCache">
				<summary>function Files:GetFileCache()

				</summary>
			</function>
			<function line="100" name="AddFileToCache">
				<summary>function Files:AddFileToCache(filename, filepath)
cache all existing filename
				</summary>
				<parameter name="filename"/>
				<parameter name="filepath"/>
			</function>
			<function line="111" name="GetFileFromCache">
				<summary>function Files:GetFileFromCache(filename)
get the full filename from cache of existing files.
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="116" name="GetShortFileFromLongFile">
				<summary>function Files:GetShortFileFromLongFile(filename)
get short filename from cache of existing files to their long file path. 
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="122" name="GetRelativePath">
				<summary>function Files.GetRelativePath(filename)
get file path that is relative to current world directory. if not, it will return as it is. 
in most cases, we will store filenames using relative file path. But we have to pass to game engine the real path. 
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="137" name="GetFilePath">
				<summary>function Files.GetFilePath(filename)
we will try to find a file in world directory or global directory at all cost and save the result to cache 
so that the next time the same file is requeried, we will return fast for both exist or non-exist ones. 
see also Files.FindFile() it differs with it for non-exist files, this function will also cache non-exist files. 
Files.FindFile does not cache non-exist files.
   @return it will return the file path or false if not found
				</summary>
				<parameter name="filename"/>
				<returns>return will return the file path or false if not found
				</returns>
			</function>
			<function line="156" name="FindFile">
				<summary>function Files.FindFile(filename, searchpaths)
find a given file by its file path. 
see also: Files.GetCachedFilePath()
it will search filename, [worldpath]/filename,  replace [worlds/DesignHouse/last] with current one. 
internally it will use a cache which only last for the current world, to accelerate for repeated calls.
   @param searchpaths: nil or additional search path seperated by ";". such as such as "Texture/blocks/human/"
   @return the real file or nil if not exist 
				</summary>
				<parameter name="filename"/>
				<parameter name="searchpaths">nil or additional search path seperated by ";". such as such as "Texture/blocks/human/"
				</parameter>
				<returns>return real file or nil if not exist 
				</returns>
			</function>
			<function line="194" name="ResolveFilePath">
				<summary>function Files.ResolveFilePath(filename)
resolve filename and return some information. 
&lt;verbatim&gt;
   @param filename: any file path such as an absolute path during a drag &amp; drop event.
   @return {
isExternalFile,  -- boolean: if file is external to SDK
isInWorldDirectory, -- boolean: if file is inside the current world directory. 
relativeToWorldPath, 
relativeToRootPath, -- only valid if isExternalFile is nil.  
isAbsoluteFilepath, -- boolean relativeToRootPath, 
filename, -- no directory 
}&lt;/verbatim&gt;
				</summary>
				<parameter name="filename">any file path such as an absolute path during a drag &amp; drop event.
				</parameter>
				<returns>return {
isExternalFile,  -- boolean: if file is external to SDK
isInWorldDirectory, -- boolean: if file is inside the current world directory. 
relativeToWorldPath, 
relativeToRootPath, -- only valid if isExternalFile is nil.  
isAbsoluteFilepath, -- boolean relativeToRootPath, 
filename, -- no directory 
}&lt;/verbatim&gt;
				</returns>
			</function>
		</table>
		<table name="World" src="script/apps/Aries/Creator/Game/World/World.lua">
			<function line="32" name="ctor">
				<summary>function World:ctor()

				</summary>
			</function>
			<function line="41" name="Init">
				<summary>function World:Init(server_manager, saveHandler)

   @param server_manager: can be nil for client or standalone
   @param saveHandler: can be nil for WorldClient
				</summary>
				<parameter name="server_manager">can be nil for client or standalone
				</parameter>
				<parameter name="saveHandler">can be nil for WorldClient
				</parameter>
			</function>
			<function line="57" name="CreateChunkProvider">
				<summary>function World:CreateChunkProvider()
virtual function: Creates the chunk provider for this world. Called in the constructor. 
				</summary>
			</function>
			<function line="63" name="GetChunkProvider">
				<summary>function World:GetChunkProvider()

				</summary>
			</function>
			<function line="67" name="GetServerManager">
				<summary>function World:GetServerManager()

				</summary>
			</function>
			<function line="71" name="GetPlayer">
				<summary>function World:GetPlayer()

				</summary>
			</function>
			<function line="75" name="OnPreloadWorld">
				<summary>function World:OnPreloadWorld()

				</summary>
			</function>
			<function line="79" name="GetWorldPath">
				<summary>function World:GetWorldPath()

				</summary>
			</function>
			<function line="87" name="InitBlockGenerator">
				<summary>function World:InitBlockGenerator()
world tag "world_generator", "seed"
				</summary>
			</function>
			<function line="140" name="ReplaceWorld">
				<summary>function World:ReplaceWorld(oldWorld)

				</summary>
				<parameter name="oldWorld"/>
			</function>
			<function line="148" name="OnWeaklyDestroyWorld">
				<summary>function World:OnWeaklyDestroyWorld()
this function is called when the world is possibly replaced by another world object
thus as toggling from client world to server world, without leaving the world.
				</summary>
			</function>
			<function line="152" name="OnExit">
				<summary>function World:OnExit()

				</summary>
			</function>
			<function line="158" name="EnableWorldTracker">
				<summary>function World:EnableWorldTracker(bEnabled)
world trackers may be temporily disabled and then enabled again, for example when client receives
block change packet and updates the local world. The updated blocks should not be tracked. 
				</summary>
				<parameter name="bEnabled"/>
			</function>
			<function line="165" name="IsClient">
				<summary>function World:IsClient()

				</summary>
			</function>
			<function line="170" name="AddWorldTracker">
				<summary>function World:AddWorldTracker(worldTracker)

				</summary>
				<parameter name="worldTracker"/>
			</function>
			<function line="176" name="RemoveWorldTracker">
				<summary>function World:RemoveWorldTracker(worldTracker)

				</summary>
				<parameter name="worldTracker"/>
			</function>
			<function line="180" name="ClearWorldTrackers">
				<summary>function World:ClearWorldTrackers()

				</summary>
			</function>
			<function line="184" name="FrameMove">
				<summary>function World:FrameMove(deltaTime)

				</summary>
				<parameter name="deltaTime"/>
			</function>
			<function line="189" name="SetWorldSize">
				<summary>function World:SetWorldSize(x, y, z, dx, dy, dz)
set world size by center and extend. 
mostly used on 32/64bits server to prevent running out of memory. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="dx"/>
				<parameter name="dy"/>
				<parameter name="dz"/>
			</function>
			<function line="204" name="GetSpawnPoint">
				<summary>function World:GetSpawnPoint()
get player home spawn position. 
				</summary>
			</function>
			<function line="218" name="SetSpawnPoint">
				<summary>function World:SetSpawnPoint(x,y,z)
set player home position.
   @param x, y, z: if nil, the current player position is used. 
				</summary>
				<parameter name="x">, y, z: if nil, the current player position is used. 
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="240" name="GetWorldInfo">
				<summary>function World:GetWorldInfo()

				</summary>
			</function>
			<function line="245" name="SpawnEntityInWorld">
				<summary>function World:SpawnEntityInWorld(entity)
Called to place all entities as part of a world
				</summary>
				<parameter name="entity"/>
			</function>
			<function line="249" name="GetTotalWorldTime">
				<summary>function World:GetTotalWorldTime()

				</summary>
			</function>
			<function line="253" name="GetWorldTime">
				<summary>function World:GetWorldTime()

				</summary>
			</function>
			<function line="257" name="GetGameRules">
				<summary>function World:GetGameRules()

				</summary>
			</function>
			<function line="262" name="GetSaveHandler">
				<summary>function World:GetSaveHandler()
Returns this world's current save handler
				</summary>
			</function>
			<function line="268" name="GetPlayer">
				<summary>function World:GetPlayer(name)
get player
   @param name: if nil or "player", the current player is returned. 
				</summary>
				<parameter name="name">if nil or "player", the current player is returned. 
				</parameter>
			</function>
			<function line="272" name="GetEntityByID">
				<summary>function World:GetEntityByID(id)

				</summary>
				<parameter name="id"/>
			</function>
			<function line="278" name="MarkBlockForUpdate">
				<summary>function World:MarkBlockForUpdate(x, y, z)
On the client, re-renders the block. On the server, sends the block to the client (which will re-render it),
including the tile entity description packet if applicable. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="285" name="OnChunkGenerated">
				<summary>function World:OnChunkGenerated(chunkX, chunkZ)
on client does nothing, on server broadcase to observing client
				</summary>
				<parameter name="chunkX"/>
				<parameter name="chunkZ"/>
			</function>
			<function line="292" name="MarkBlockForRenderUpdate">
				<summary>function World:MarkBlockForRenderUpdate(x,y,z)
On the client, re-renders this block. On the server, does nothing. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="299" name="MarkBlockRangeForRenderUpdate">
				<summary>function World:MarkBlockRangeForRenderUpdate(min_x, min_y, min_z, max_x, max_y, max_z)
On the client, re-renders all blocks in this range, inclusive. On the server, does nothing.
				</summary>
				<parameter name="min_x"/>
				<parameter name="min_y"/>
				<parameter name="min_z"/>
				<parameter name="max_x"/>
				<parameter name="max_y"/>
				<parameter name="max_z"/>
			</function>
			<function line="305" name="OnEntityAdded">
				<summary>function World:OnEntityAdded(entity)

				</summary>
				<parameter name="entity"/>
			</function>
			<function line="311" name="OnEntityRemoved">
				<summary>function World:OnEntityRemoved(entity)

				</summary>
				<parameter name="entity"/>
			</function>
			<function line="317" name="OnPlaySound">
				<summary>function World:OnPlaySound(soundName, x, y, z, volume, pitch)

				</summary>
				<parameter name="soundName"/>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="volume"/>
				<parameter name="pitch"/>
			</function>
			<function line="325" name="DestroyBlockPartially">
				<summary>function World:DestroyBlockPartially(entityId, x,y,z, damage)
virtual: set new damage to a given block
   @param damage: [1-10), other values will remove it. 
				</summary>
				<parameter name="entityId"/>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="damage">[1-10), other values will remove it. 
				</parameter>
			</function>
			<function line="331" name="GetChunkFromChunkCoords">
				<summary>function World:GetChunkFromChunkCoords(chunkX, chunkZ)

				</summary>
				<parameter name="chunkX"/>
				<parameter name="chunkZ"/>
			</function>
			<function line="336" name="GetTotalWorldTime">
				<summary>function World:GetTotalWorldTime()
total number of world ticks since the world is created. 
				</summary>
			</function>
			<function line="341" name="GetWorldTime">
				<summary>function World:GetWorldTime()
current world time in day-light cycle (repeat in a day).
				</summary>
			</function>
			<function line="345" name="Tick">
				<summary>function World:Tick()

				</summary>
			</function>
			<function line="351" name="UpdateEntity">
				<summary>function World:UpdateEntity(entity, bForceUpdate)
update the entity in the world
   @param bForceUpdate: default to true. if true, the entity's framemove function will be called.
				</summary>
				<parameter name="entity"/>
				<parameter name="bForceUpdate">default to true. if true, the entity's framemove function will be called.
				</parameter>
			</function>
			<function line="386" name="GetCollidingBoundingBoxes">
				<summary>function World:GetCollidingBoundingBoxes(aabb, entity)
Returns a list of bounding boxes that collide with aabb including the passed in entity's collision.
   @param aabb: 
return array list of bounding box (all bounding box is read-only), modifications will lead to unexpected result. 
				</summary>
				<parameter name="aabb">return array list of bounding box (all bounding box is read-only), modifications will lead to unexpected result. 
				</parameter>
				<parameter name="entity"/>
			</function>
			<function line="390" name="RemoveEntity">
				<summary>function World:RemoveEntity(entity)

				</summary>
				<parameter name="entity"/>
			</function>
			<function line="395" name="RemovePlayerEntityDangerously">
				<summary>function World:RemovePlayerEntityDangerously(entity)
Do NOT use this method to remove normal entities- use normal RemoveEntity
				</summary>
				<parameter name="entity"/>
			</function>
			<function line="399" name="GetBlockEntityList">
				<summary>function World:GetBlockEntityList(from_x,from_y,from_z, to_x, to_y, to_z)

				</summary>
				<parameter name="from_x"/>
				<parameter name="from_y"/>
				<parameter name="from_z"/>
				<parameter name="to_x"/>
				<parameter name="to_y"/>
				<parameter name="to_z"/>
			</function>
			<function line="404" name="GetEntityListInChunk">
				<summary>function World:GetEntityListInChunk(chunkX, chunkZ)
this is a faster way to interate all entities in the chunk. please note that it may contain non-block entities. 
				</summary>
				<parameter name="chunkX"/>
				<parameter name="chunkZ"/>
			</function>
			<function line="411" name="CreateBlockPieces">
				<summary>function World:CreateBlockPieces(block_template, blockX, blockY, blockZ, granularity, texture_filename, cx, cy, cz, color)

   @param granularity: (0-1), 1 will generate 27 pieces, 0 will generate 0 pieces, default to 1.
   @param cx, cy, cz: center of break point. 
				</summary>
				<parameter name="block_template"/>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
				<parameter name="granularity">(0-1), 1 will generate 27 pieces, 0 will generate 0 pieces, default to 1.
				</parameter>
				<parameter name="texture_filename"/>
				<parameter name="cx">, cy, cz: center of break point. 
				</parameter>
				<parameter name="cy"/>
				<parameter name="cz"/>
				<parameter name="color"/>
			</function>
			<function line="419" name="DoPreChunk">
				<summary>function World:DoPreChunk(chunkX, chunkZ, bLoad)
this function is called when chunk is loaded or unloaded for the first time.
   @param bLoad: true to create, false to unload
				</summary>
				<parameter name="chunkX"/>
				<parameter name="chunkZ"/>
				<parameter name="bLoad">true to create, false to unload
				</parameter>
			</function>
			<function line="429" name="InvalidateBlockReceiveRegion">
				<summary>function World:InvalidateBlockReceiveRegion(from_x,from_y,from_z, to_x, to_y, to_z)
this function is called before we apply new chunk data over existing chunks
				</summary>
				<parameter name="from_x"/>
				<parameter name="from_y"/>
				<parameter name="from_z"/>
				<parameter name="to_x"/>
				<parameter name="to_y"/>
				<parameter name="to_z"/>
			</function>
		</table>
		<table name="SelectionManager" src="script/apps/Aries/Creator/Game/SceneContext/SelectionManager.lua">
			<function line="37" name="ctor">
				<summary>function SelectionManager:ctor()

				</summary>
			</function>
			<function line="45" name="GetPickingResult">
				<summary>function SelectionManager:GetPickingResult()
get the current mouse picking result. 
				</summary>
			</function>
			<function line="49" name="SetPickingDist">
				<summary>function SelectionManager:SetPickingDist(dist)

				</summary>
				<parameter name="dist"/>
			</function>
			<function line="53" name="GetPickingDist">
				<summary>function SelectionManager:GetPickingDist()

				</summary>
			</function>
			<function line="57" name="Clear">
				<summary>function SelectionManager:Clear()

				</summary>
			</function>
			<function line="62" name="ClearPickingResult">
				<summary>function SelectionManager:ClearPickingResult()

				</summary>
			</function>
			<function line="68" name="MousePickBlock">
				<summary>function SelectionManager:MousePickBlock(bPickBlocks, bPickPoint, bPickObjects, picking_dist)

   @param bPickBlocks, bPickPoint, bPickObjects: default to true
return result;
				</summary>
				<parameter name="bPickBlocks">, bPickPoint, bPickObjects: default to true
return result;
				</parameter>
				<parameter name="bPickPoint"/>
				<parameter name="bPickObjects"/>
				<parameter name="picking_dist"/>
			</function>
			<function line="160" name="GetSelectedBlocks">
				<summary>function SelectionManager:GetSelectedBlocks()

   @return nil of a table of selected blocks.
				</summary>
				<returns>return of a table of selected blocks.
				</returns>
			</function>
			<function line="172" name="GetSelectedActor">
				<summary>function SelectionManager:GetSelectedActor()
get selected movie actor
				</summary>
			</function>
			<function line="177" name="GetLastSelectedActor">
				<summary>function SelectionManager:GetLastSelectedActor()
get the previously selected actor. 
				</summary>
			</function>
			<function line="181" name="SetSelectedActor">
				<summary>function SelectionManager:SetSelectedActor(actor)

				</summary>
				<parameter name="actor"/>
			</function>
		</table>
		<table name="BaseContext" src="script/apps/Aries/Creator/Game/SceneContext/BaseContext.lua">
			<function line="71" name="ctor">
				<summary>function BaseContext:ctor()

				</summary>
			</function>
			<function line="81" name="OnSelect">
				<summary>function BaseContext:OnSelect()

				</summary>
			</function>
			<function line="88" name="OnUnselect">
				<summary>function BaseContext:OnUnselect()
virtual function: 
return true if we are not in the middle of any operation and fire unselected signal. 
or false, if we can not unselect the scene tool context at the moment. 
				</summary>
			</function>
			<function line="97" name="GetClickData">
				<summary>function BaseContext:GetClickData()

				</summary>
			</function>
			<function line="103" name="handleDropFile">
				<summary>function BaseContext:handleDropFile(filename, fileType)
user has drag and dropped an existing file to the context
   @param fileType: "model", "blocktemplate"
				</summary>
				<parameter name="filename"/>
				<parameter name="fileType">"model", "blocktemplate"
				</parameter>
			</function>
			<function line="114" name="EnableMouseDownTimer">
				<summary>function BaseContext:EnableMouseDownTimer(bEnable)
enable mouse down timer to repeatedly receive OnMouseDownTimer callback. 
mouse down timer is automatically stopped when there is no mouse event. so one only need to enable it in mouse press event. 
				</summary>
				<parameter name="bEnable"/>
			</function>
			<function line="127" name="EnableMousePickTimer">
				<summary>function BaseContext:EnableMousePickTimer(bEnable)

				</summary>
				<parameter name="bEnable"/>
			</function>
			<function line="142" name="OnMouseDownTimer">
				<summary>function BaseContext:OnMouseDownTimer(timer)
virtual function: called repeatedly whenever mouse button is down. 
				</summary>
				<parameter name="timer"/>
			</function>
			<function line="156" name="handleHookedMouseEvent">
				<summary>function BaseContext:handleHookedMouseEvent(event)
return true if handled
				</summary>
				<parameter name="event"/>
			</function>
			<function line="185" name="handleItemMouseEvent">
				<summary>function BaseContext:handleItemMouseEvent(event)
if item accept mousePressEvent, it will also handle mouseMove and mouseRelease on its own. 
if item does not accept mousePressEvent, it will not receive any mouseMove or mouseRelease event, and the default handler is used. 
return true if handled
				</summary>
				<parameter name="event"/>
			</function>
			<function line="218" name="CheckMousePick">
				<summary>function BaseContext:CheckMousePick()
this function is called repeatedly if MousePickTimer is enabled. 
it can also be called independently.
   @return the picking result table
				</summary>
				<returns>return picking result table
				</returns>
			</function>
			<function line="253" name="HighlightPickBlock">
				<summary>function BaseContext:HighlightPickBlock(result)

				</summary>
				<parameter name="result"/>
			</function>
			<function line="290" name="HighlightPickEntity">
				<summary>function BaseContext:HighlightPickEntity(result)

				</summary>
				<parameter name="result"/>
			</function>
			<function line="301" name="ClearBlockPickDisplay">
				<summary>function BaseContext:ClearBlockPickDisplay()

				</summary>
			</function>
			<function line="306" name="ClearPickDisplay">
				<summary>function BaseContext:ClearPickDisplay()

				</summary>
			</function>
			<function line="316" name="OnLeftMouseHold">
				<summary>function BaseContext:OnLeftMouseHold(fDelta)
called every 30 milliseconds, when user is holding the left button without releasing it.
   @param fDelta: 
				</summary>
				<parameter name="fDelta">
				</parameter>
			</function>
			<function line="349" name="OnLeftLongHoldBreakBlock">
				<summary>function BaseContext:OnLeftLongHoldBreakBlock()
virtual function: when user is holding the left button for long enough. 
				</summary>
			</function>
			<function line="352" name="OnRightMouseHold">
				<summary>function BaseContext:OnRightMouseHold(fDelta)

				</summary>
				<parameter name="fDelta"/>
			</function>
			<function line="356" name="UpdateClickStrength">
				<summary>function BaseContext:UpdateClickStrength(fDelta, result)

				</summary>
				<parameter name="fDelta"/>
				<parameter name="result"/>
			</function>
			<function line="436" name="BeginMouseClickCheck">
				<summary>function BaseContext:BeginMouseClickCheck()
call this function in mouse down event and then call EndMouseClickCheck() in mouse up event. 
if the latter return true, it is a mouse click, otherwise the camera has moved during begin/end pair. 
				</summary>
			</function>
			<function line="445" name="EndMouseClickCheck">
				<summary>function BaseContext:EndMouseClickCheck(event)

   @param event: mouse release event
return true if it is a mouse click
				</summary>
				<parameter name="event">mouse release event
return true if it is a mouse click
				</parameter>
			</function>
			<function line="474" name="mousePressEvent">
				<summary>function BaseContext:mousePressEvent(event)
virtual: 
				</summary>
				<parameter name="event"/>
			</function>
			<function line="491" name="mouseMoveEvent">
				<summary>function BaseContext:mouseMoveEvent(event)
virtual: 
				</summary>
				<parameter name="event"/>
			</function>
			<function line="498" name="mouseReleaseEvent">
				<summary>function BaseContext:mouseReleaseEvent(event)
virtual: 
				</summary>
				<parameter name="event"/>
			</function>
			<function line="512" name="handleCameraWheelEvent">
				<summary>function BaseContext:handleCameraWheelEvent(event)

				</summary>
				<parameter name="event"/>
			</function>
			<function line="520" name="mouseWheelEvent">
				<summary>function BaseContext:mouseWheelEvent(event)
virtual: 
				</summary>
				<parameter name="event"/>
			</function>
			<function line="541" name="handleHookedKeyEvent">
				<summary>function BaseContext:handleHookedKeyEvent(event)
virtual: return true if handled
				</summary>
				<parameter name="event"/>
			</function>
			<function line="561" name="handleItemKeyEvent">
				<summary>function BaseContext:handleItemKeyEvent(event)

				</summary>
				<parameter name="event"/>
			</function>
			<function line="569" name="keyPressEvent">
				<summary>function BaseContext:keyPressEvent(event)
virtual: actually means key stroke. 
				</summary>
				<parameter name="event"/>
			</function>
			<function line="579" name="HandleEscapeKey">
				<summary>function BaseContext:HandleEscapeKey()
virtual function handle escape key
				</summary>
			</function>
			<function line="607" name="TryDestroyBlock">
				<summary>function BaseContext:TryDestroyBlock(result, is_allow_delete_terrain)
try to destroy the block at picking result
if the terrain block is hit, click_data.strength must be larger than max_break_time
   @param is_allow_delete_terrain: true 
				</summary>
				<parameter name="result"/>
				<parameter name="is_allow_delete_terrain">true 
				</parameter>
			</function>
			<function line="640" name="OnCreateSingleBlock">
				<summary>function BaseContext:OnCreateSingleBlock(x,y,z, block_id, result)

				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="block_id"/>
				<parameter name="result"/>
			</function>
			<function line="663" name="OnCreateBlock">
				<summary>function BaseContext:OnCreateBlock(result)

				</summary>
				<parameter name="result"/>
			</function>
			<function line="723" name="HandleQuickSelectKey">
				<summary>function BaseContext:HandleQuickSelectKey(event)
for Numeric key 1-9
				</summary>
				<parameter name="event"/>
			</function>
			<function line="726" name="handleLeftClickScene">
				<summary>function BaseContext:handleLeftClickScene(event, result)

				</summary>
				<parameter name="event"/>
				<parameter name="result"/>
			</function>
			<function line="729" name="handleMiddleClickScene">
				<summary>function BaseContext:handleMiddleClickScene(event, result)

				</summary>
				<parameter name="event"/>
				<parameter name="result"/>
			</function>
			<function line="749" name="handleRightClickScene">
				<summary>function BaseContext:handleRightClickScene(event, result)

				</summary>
				<parameter name="event"/>
				<parameter name="result"/>
			</function>
			<function line="788" name="handleHistoryKeyEvent">
				<summary>function BaseContext:handleHistoryKeyEvent(event)
virtual: undo/redo related key events, such as ctrl+Z/Y
return true if processed
				</summary>
				<parameter name="event"/>
			</function>
			<function line="793" name="handlePlayerKeyEvent">
				<summary>function BaseContext:handlePlayerKeyEvent(event)
virtual function: handle player controller key event
return true if processed
				</summary>
				<parameter name="event"/>
			</function>
			<function line="840" name="close">
				<summary>function BaseContext:close()
deactivate this context and switch back to default scene context with the current game mode. 
				</summary>
			</function>
			<function line="846" name="HandleGlobalKey">
				<summary>function BaseContext:HandleGlobalKey(event)
handle all global key events that should always be available to the user regardless of whatever scene context. 
return true if key is handled. 
				</summary>
				<parameter name="event"/>
			</function>
		</table>
	</tables>
	<globals/>
	<variables>
		<variable name="BlockEngine" type="BlockEngine"/>
		<variable name="GameLogic" type="GameLogic"/>
		<variable name="CmdParser" type="CmdParser"/>
		<variable name="CommandManager" type="CommandManager"/>
		<variable name="EntityManager" type="EntityManager"/>
		<variable name="Entity" type="Entity"/>
		<variable name="ItemClient" type="ItemClient"/>
		<variable name="Item" type="Item"/>
		<variable name="ItemStack" type="ItemStack"/>
		<variable name="block_types" type="block_types"/>
		<variable name="block_model" type="block_model"/>
		<variable name="block" type="block"/>
		<variable name="Files" type="Files"/>
		<variable name="World" type="World"/>
		<variable name="SelectionManager" type="SelectionManager"/>
		<variable name="BaseContext" type="BaseContext"/>
	</variables>
</doc>